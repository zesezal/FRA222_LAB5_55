
LAB5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041b4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000058c  08004354  08004354  00014354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048e0  080048e0  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080048e0  080048e0  000148e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048e8  080048e8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048e8  080048e8  000148e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048ec  080048ec  000148ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080048f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  20000078  08004968  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000288  08004968  00020288  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008cd8  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000172a  00000000  00000000  00028d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000700  00000000  00000000  0002a4b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000678  00000000  00000000  0002abb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015973  00000000  00000000  0002b228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008ca8  00000000  00000000  00040b9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085e3b  00000000  00000000  00049843  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cf67e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f50  00000000  00000000  000cf6d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800433c 	.word	0x0800433c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	0800433c 	.word	0x0800433c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000598:	f000 fc74 	bl	8000e84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059c:	f000 f822 	bl	80005e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a0:	f000 f8dc 	bl	800075c <MX_GPIO_Init>
  MX_DMA_Init();
 80005a4:	f000 f8b2 	bl	800070c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005a8:	f000 f886 	bl	80006b8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  UARTDMAConfig();
 80005ac:	f000 f944 	bl	8000838 <UARTDMAConfig>
  MenuState();
 80005b0:	f000 f98e 	bl	80008d0 <MenuState>
  sprintf((char*)TxBuffer,"  Choose your menu\r\n-----------------\r\n{0} LED Control\r\n{1} Button Status\r\n-------------------\r\n\r\n\r\n\r\n\r\n");
 80005b4:	4908      	ldr	r1, [pc, #32]	; (80005d8 <main+0x44>)
 80005b6:	4809      	ldr	r0, [pc, #36]	; (80005dc <main+0x48>)
 80005b8:	f003 fa52 	bl	8003a60 <siprintf>
  HAL_UART_Transmit_DMA(&huart2, TxBuffer, strlen((char*)TxBuffer));
 80005bc:	4807      	ldr	r0, [pc, #28]	; (80005dc <main+0x48>)
 80005be:	f7ff fe0f 	bl	80001e0 <strlen>
 80005c2:	4603      	mov	r3, r0
 80005c4:	b29b      	uxth	r3, r3
 80005c6:	461a      	mov	r2, r3
 80005c8:	4904      	ldr	r1, [pc, #16]	; (80005dc <main+0x48>)
 80005ca:	4805      	ldr	r0, [pc, #20]	; (80005e0 <main+0x4c>)
 80005cc:	f002 f87e 	bl	80026cc <HAL_UART_Transmit_DMA>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  MenuState();

		  LEDLoop();
 80005d0:	f000 f956 	bl	8000880 <LEDLoop>
 80005d4:	e7fc      	b.n	80005d0 <main+0x3c>
 80005d6:	bf00      	nop
 80005d8:	08004354 	.word	0x08004354
 80005dc:	2000019c 	.word	0x2000019c
 80005e0:	20000094 	.word	0x20000094

080005e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b094      	sub	sp, #80	; 0x50
 80005e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ea:	f107 0320 	add.w	r3, r7, #32
 80005ee:	2230      	movs	r2, #48	; 0x30
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f003 fa2c 	bl	8003a50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f8:	f107 030c 	add.w	r3, r7, #12
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
 8000606:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000608:	2300      	movs	r3, #0
 800060a:	60bb      	str	r3, [r7, #8]
 800060c:	4b28      	ldr	r3, [pc, #160]	; (80006b0 <SystemClock_Config+0xcc>)
 800060e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000610:	4a27      	ldr	r2, [pc, #156]	; (80006b0 <SystemClock_Config+0xcc>)
 8000612:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000616:	6413      	str	r3, [r2, #64]	; 0x40
 8000618:	4b25      	ldr	r3, [pc, #148]	; (80006b0 <SystemClock_Config+0xcc>)
 800061a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000620:	60bb      	str	r3, [r7, #8]
 8000622:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000624:	2300      	movs	r3, #0
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	4b22      	ldr	r3, [pc, #136]	; (80006b4 <SystemClock_Config+0xd0>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a21      	ldr	r2, [pc, #132]	; (80006b4 <SystemClock_Config+0xd0>)
 800062e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000632:	6013      	str	r3, [r2, #0]
 8000634:	4b1f      	ldr	r3, [pc, #124]	; (80006b4 <SystemClock_Config+0xd0>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800063c:	607b      	str	r3, [r7, #4]
 800063e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000640:	2302      	movs	r3, #2
 8000642:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000644:	2301      	movs	r3, #1
 8000646:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000648:	2310      	movs	r3, #16
 800064a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064c:	2302      	movs	r3, #2
 800064e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000650:	2300      	movs	r3, #0
 8000652:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000654:	2310      	movs	r3, #16
 8000656:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000658:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800065c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800065e:	2304      	movs	r3, #4
 8000660:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000662:	2304      	movs	r3, #4
 8000664:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000666:	f107 0320 	add.w	r3, r7, #32
 800066a:	4618      	mov	r0, r3
 800066c:	f001 fb48 	bl	8001d00 <HAL_RCC_OscConfig>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000676:	f000 fa67 	bl	8000b48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067a:	230f      	movs	r3, #15
 800067c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067e:	2302      	movs	r3, #2
 8000680:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000682:	2300      	movs	r3, #0
 8000684:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000686:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800068a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000690:	f107 030c 	add.w	r3, r7, #12
 8000694:	2102      	movs	r1, #2
 8000696:	4618      	mov	r0, r3
 8000698:	f001 fdaa 	bl	80021f0 <HAL_RCC_ClockConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006a2:	f000 fa51 	bl	8000b48 <Error_Handler>
  }
}
 80006a6:	bf00      	nop
 80006a8:	3750      	adds	r7, #80	; 0x50
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40023800 	.word	0x40023800
 80006b4:	40007000 	.word	0x40007000

080006b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006bc:	4b11      	ldr	r3, [pc, #68]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006be:	4a12      	ldr	r2, [pc, #72]	; (8000708 <MX_USART2_UART_Init+0x50>)
 80006c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 80006c2:	4b10      	ldr	r3, [pc, #64]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006c4:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80006c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ca:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006d0:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006d6:	4b0b      	ldr	r3, [pc, #44]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006dc:	4b09      	ldr	r3, [pc, #36]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006de:	220c      	movs	r2, #12
 80006e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e2:	4b08      	ldr	r3, [pc, #32]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e8:	4b06      	ldr	r3, [pc, #24]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ee:	4805      	ldr	r0, [pc, #20]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006f0:	f001 ff9e 	bl	8002630 <HAL_UART_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006fa:	f000 fa25 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	20000094 	.word	0x20000094
 8000708:	40004400 	.word	0x40004400

0800070c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	607b      	str	r3, [r7, #4]
 8000716:	4b10      	ldr	r3, [pc, #64]	; (8000758 <MX_DMA_Init+0x4c>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a0f      	ldr	r2, [pc, #60]	; (8000758 <MX_DMA_Init+0x4c>)
 800071c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b0d      	ldr	r3, [pc, #52]	; (8000758 <MX_DMA_Init+0x4c>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800072e:	2200      	movs	r2, #0
 8000730:	2100      	movs	r1, #0
 8000732:	2010      	movs	r0, #16
 8000734:	f000 fcf3 	bl	800111e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000738:	2010      	movs	r0, #16
 800073a:	f000 fd0c 	bl	8001156 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800073e:	2200      	movs	r2, #0
 8000740:	2100      	movs	r1, #0
 8000742:	2011      	movs	r0, #17
 8000744:	f000 fceb 	bl	800111e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000748:	2011      	movs	r0, #17
 800074a:	f000 fd04 	bl	8001156 <HAL_NVIC_EnableIRQ>

}
 800074e:	bf00      	nop
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40023800 	.word	0x40023800

0800075c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b08a      	sub	sp, #40	; 0x28
 8000760:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000762:	f107 0314 	add.w	r3, r7, #20
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]
 800076e:	60da      	str	r2, [r3, #12]
 8000770:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	613b      	str	r3, [r7, #16]
 8000776:	4b2d      	ldr	r3, [pc, #180]	; (800082c <MX_GPIO_Init+0xd0>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a2c      	ldr	r2, [pc, #176]	; (800082c <MX_GPIO_Init+0xd0>)
 800077c:	f043 0304 	orr.w	r3, r3, #4
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b2a      	ldr	r3, [pc, #168]	; (800082c <MX_GPIO_Init+0xd0>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0304 	and.w	r3, r3, #4
 800078a:	613b      	str	r3, [r7, #16]
 800078c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	4b26      	ldr	r3, [pc, #152]	; (800082c <MX_GPIO_Init+0xd0>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a25      	ldr	r2, [pc, #148]	; (800082c <MX_GPIO_Init+0xd0>)
 8000798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b23      	ldr	r3, [pc, #140]	; (800082c <MX_GPIO_Init+0xd0>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	4b1f      	ldr	r3, [pc, #124]	; (800082c <MX_GPIO_Init+0xd0>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a1e      	ldr	r2, [pc, #120]	; (800082c <MX_GPIO_Init+0xd0>)
 80007b4:	f043 0301 	orr.w	r3, r3, #1
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b1c      	ldr	r3, [pc, #112]	; (800082c <MX_GPIO_Init+0xd0>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	4b18      	ldr	r3, [pc, #96]	; (800082c <MX_GPIO_Init+0xd0>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a17      	ldr	r2, [pc, #92]	; (800082c <MX_GPIO_Init+0xd0>)
 80007d0:	f043 0302 	orr.w	r3, r3, #2
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b15      	ldr	r3, [pc, #84]	; (800082c <MX_GPIO_Init+0xd0>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0302 	and.w	r3, r3, #2
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2120      	movs	r1, #32
 80007e6:	4812      	ldr	r0, [pc, #72]	; (8000830 <MX_GPIO_Init+0xd4>)
 80007e8:	f001 fa56 	bl	8001c98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007f2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007fc:	f107 0314 	add.w	r3, r7, #20
 8000800:	4619      	mov	r1, r3
 8000802:	480c      	ldr	r0, [pc, #48]	; (8000834 <MX_GPIO_Init+0xd8>)
 8000804:	f001 f8c4 	bl	8001990 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000808:	2320      	movs	r3, #32
 800080a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080c:	2301      	movs	r3, #1
 800080e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000814:	2300      	movs	r3, #0
 8000816:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000818:	f107 0314 	add.w	r3, r7, #20
 800081c:	4619      	mov	r1, r3
 800081e:	4804      	ldr	r0, [pc, #16]	; (8000830 <MX_GPIO_Init+0xd4>)
 8000820:	f001 f8b6 	bl	8001990 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000824:	bf00      	nop
 8000826:	3728      	adds	r7, #40	; 0x28
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	40023800 	.word	0x40023800
 8000830:	40020000 	.word	0x40020000
 8000834:	40020800 	.word	0x40020800

08000838 <UARTDMAConfig>:

/* USER CODE BEGIN 4 */

void UARTDMAConfig()
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
	//start UART in DMA mode
	HAL_UART_Receive_DMA(&huart2, RxBuffer, 1);
 800083c:	2201      	movs	r2, #1
 800083e:	4903      	ldr	r1, [pc, #12]	; (800084c <UARTDMAConfig+0x14>)
 8000840:	4803      	ldr	r0, [pc, #12]	; (8000850 <UARTDMAConfig+0x18>)
 8000842:	f001 ffc1 	bl	80027c8 <HAL_UART_Receive_DMA>


}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	20000198 	.word	0x20000198
 8000850:	20000094 	.word	0x20000094

08000854 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
	if(huart == &huart2 )
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	4a06      	ldr	r2, [pc, #24]	; (8000878 <HAL_UART_RxCpltCallback+0x24>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d104      	bne.n	800086e <HAL_UART_RxCpltCallback+0x1a>
	{
		//(for string only) Add string stop symbol \0 to end string
		RxBuffer[1] = '\0';
 8000864:	4b05      	ldr	r3, [pc, #20]	; (800087c <HAL_UART_RxCpltCallback+0x28>)
 8000866:	2200      	movs	r2, #0
 8000868:	705a      	strb	r2, [r3, #1]
		MenuState();
 800086a:	f000 f831 	bl	80008d0 <MenuState>
	}
}
 800086e:	bf00      	nop
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	20000094 	.word	0x20000094
 800087c:	20000198 	.word	0x20000198

08000880 <LEDLoop>:

void LEDLoop()
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
	static uint32_t timestamp = 0;
		if(HAL_GetTick() >= timestamp && ledstatus == 1)
 8000884:	f000 fb64 	bl	8000f50 <HAL_GetTick>
 8000888:	4602      	mov	r2, r0
 800088a:	4b0d      	ldr	r3, [pc, #52]	; (80008c0 <LEDLoop+0x40>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	429a      	cmp	r2, r3
 8000890:	d314      	bcc.n	80008bc <LEDLoop+0x3c>
 8000892:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <LEDLoop+0x44>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	2b01      	cmp	r3, #1
 8000898:	d110      	bne.n	80008bc <LEDLoop+0x3c>
		{
			timestamp = HAL_GetTick() + (1000/(LEDHz * 2));
 800089a:	f000 fb59 	bl	8000f50 <HAL_GetTick>
 800089e:	4602      	mov	r2, r0
 80008a0:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <LEDLoop+0x48>)
 80008a2:	881b      	ldrh	r3, [r3, #0]
 80008a4:	005b      	lsls	r3, r3, #1
 80008a6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80008aa:	fb91 f3f3 	sdiv	r3, r1, r3
 80008ae:	4413      	add	r3, r2
 80008b0:	4a03      	ldr	r2, [pc, #12]	; (80008c0 <LEDLoop+0x40>)
 80008b2:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80008b4:	2120      	movs	r1, #32
 80008b6:	4805      	ldr	r0, [pc, #20]	; (80008cc <LEDLoop+0x4c>)
 80008b8:	f001 fa07 	bl	8001cca <HAL_GPIO_TogglePin>
		}
}
 80008bc:	bf00      	nop
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	20000268 	.word	0x20000268
 80008c4:	20000004 	.word	0x20000004
 80008c8:	20000000 	.word	0x20000000
 80008cc:	40020000 	.word	0x40020000

080008d0 <MenuState>:

void MenuState()
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
			Menu,
			LEDControl,
			buttonStatus,
		}State = Menu;

			switch(State)
 80008d4:	4b8b      	ldr	r3, [pc, #556]	; (8000b04 <MenuState+0x234>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	2b02      	cmp	r3, #2
 80008da:	f000 80e5 	beq.w	8000aa8 <MenuState+0x1d8>
 80008de:	2b02      	cmp	r3, #2
 80008e0:	f300 810e 	bgt.w	8000b00 <MenuState+0x230>
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d002      	beq.n	80008ee <MenuState+0x1e>
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d03e      	beq.n	800096a <MenuState+0x9a>
				}
			break;

			}

}
 80008ec:	e108      	b.n	8000b00 <MenuState+0x230>
				if(RxBuffer[0] == '0'){
 80008ee:	4b86      	ldr	r3, [pc, #536]	; (8000b08 <MenuState+0x238>)
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	2b30      	cmp	r3, #48	; 0x30
 80008f4:	d111      	bne.n	800091a <MenuState+0x4a>
					sprintf((char*)TxBuffer,"\r\n[ LED Control ]\r\n---------------\r\n{a} + 1 LED Hz\r\n{s} - 1 LED Hz\r\n{d} Turn on/off\r\n{x} back \r\n---------------\r\n\r\n\r\n\r\n");
 80008f6:	4985      	ldr	r1, [pc, #532]	; (8000b0c <MenuState+0x23c>)
 80008f8:	4885      	ldr	r0, [pc, #532]	; (8000b10 <MenuState+0x240>)
 80008fa:	f003 f8b1 	bl	8003a60 <siprintf>
					HAL_UART_Transmit_DMA(&huart2, TxBuffer, strlen((char*)TxBuffer));
 80008fe:	4884      	ldr	r0, [pc, #528]	; (8000b10 <MenuState+0x240>)
 8000900:	f7ff fc6e 	bl	80001e0 <strlen>
 8000904:	4603      	mov	r3, r0
 8000906:	b29b      	uxth	r3, r3
 8000908:	461a      	mov	r2, r3
 800090a:	4981      	ldr	r1, [pc, #516]	; (8000b10 <MenuState+0x240>)
 800090c:	4881      	ldr	r0, [pc, #516]	; (8000b14 <MenuState+0x244>)
 800090e:	f001 fedd 	bl	80026cc <HAL_UART_Transmit_DMA>
					State = LEDControl;
 8000912:	4b7c      	ldr	r3, [pc, #496]	; (8000b04 <MenuState+0x234>)
 8000914:	2201      	movs	r2, #1
 8000916:	701a      	strb	r2, [r3, #0]
			break;
 8000918:	e0f2      	b.n	8000b00 <MenuState+0x230>
				else if(RxBuffer[0] == '1'){
 800091a:	4b7b      	ldr	r3, [pc, #492]	; (8000b08 <MenuState+0x238>)
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	2b31      	cmp	r3, #49	; 0x31
 8000920:	d114      	bne.n	800094c <MenuState+0x7c>
					buttonstatusmode =1;
 8000922:	4b7d      	ldr	r3, [pc, #500]	; (8000b18 <MenuState+0x248>)
 8000924:	2201      	movs	r2, #1
 8000926:	601a      	str	r2, [r3, #0]
					sprintf((char*)TxBuffer,"[Button Status]\r\n-----------------\r\nButton 1 is not pressed\r\n{x} back\r\n-----------------\r\n\r\n\r\n\r\n\r\n");
 8000928:	497c      	ldr	r1, [pc, #496]	; (8000b1c <MenuState+0x24c>)
 800092a:	4879      	ldr	r0, [pc, #484]	; (8000b10 <MenuState+0x240>)
 800092c:	f003 f898 	bl	8003a60 <siprintf>
					HAL_UART_Transmit_DMA(&huart2, TxBuffer, strlen((char*)TxBuffer));
 8000930:	4877      	ldr	r0, [pc, #476]	; (8000b10 <MenuState+0x240>)
 8000932:	f7ff fc55 	bl	80001e0 <strlen>
 8000936:	4603      	mov	r3, r0
 8000938:	b29b      	uxth	r3, r3
 800093a:	461a      	mov	r2, r3
 800093c:	4974      	ldr	r1, [pc, #464]	; (8000b10 <MenuState+0x240>)
 800093e:	4875      	ldr	r0, [pc, #468]	; (8000b14 <MenuState+0x244>)
 8000940:	f001 fec4 	bl	80026cc <HAL_UART_Transmit_DMA>
					State = buttonStatus;
 8000944:	4b6f      	ldr	r3, [pc, #444]	; (8000b04 <MenuState+0x234>)
 8000946:	2202      	movs	r2, #2
 8000948:	701a      	strb	r2, [r3, #0]
			break;
 800094a:	e0d9      	b.n	8000b00 <MenuState+0x230>
					  sprintf((char*)TxBuffer,"  Choose your menu\r\n-----------------\r\n{0} LED Control\r\n{1} Button Status\r\n-------------------\r\n!!!Wrong button!!!\r\n\r\n\r\n\r\n");
 800094c:	4974      	ldr	r1, [pc, #464]	; (8000b20 <MenuState+0x250>)
 800094e:	4870      	ldr	r0, [pc, #448]	; (8000b10 <MenuState+0x240>)
 8000950:	f003 f886 	bl	8003a60 <siprintf>
					HAL_UART_Transmit_DMA(&huart2, TxBuffer, strlen((char*)TxBuffer));
 8000954:	486e      	ldr	r0, [pc, #440]	; (8000b10 <MenuState+0x240>)
 8000956:	f7ff fc43 	bl	80001e0 <strlen>
 800095a:	4603      	mov	r3, r0
 800095c:	b29b      	uxth	r3, r3
 800095e:	461a      	mov	r2, r3
 8000960:	496b      	ldr	r1, [pc, #428]	; (8000b10 <MenuState+0x240>)
 8000962:	486c      	ldr	r0, [pc, #432]	; (8000b14 <MenuState+0x244>)
 8000964:	f001 feb2 	bl	80026cc <HAL_UART_Transmit_DMA>
			break;
 8000968:	e0ca      	b.n	8000b00 <MenuState+0x230>
				if(RxBuffer[0] == 'a'){
 800096a:	4b67      	ldr	r3, [pc, #412]	; (8000b08 <MenuState+0x238>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	2b61      	cmp	r3, #97	; 0x61
 8000970:	d117      	bne.n	80009a2 <MenuState+0xd2>
					LEDHz += 1;
 8000972:	4b6c      	ldr	r3, [pc, #432]	; (8000b24 <MenuState+0x254>)
 8000974:	881b      	ldrh	r3, [r3, #0]
 8000976:	3301      	adds	r3, #1
 8000978:	b29a      	uxth	r2, r3
 800097a:	4b6a      	ldr	r3, [pc, #424]	; (8000b24 <MenuState+0x254>)
 800097c:	801a      	strh	r2, [r3, #0]
					sprintf((char*)TxBuffer,"\r\n[ LED Control ]\r\n---------------\r\n{a} + 1 LED Hz\r\n{s} - 1 LED Hz\r\n{d} Turn on/off\r\n{x} back \r\n---------------\r\nLED Hz set to %d\r\n\r\n\r\n", LEDHz);
 800097e:	4b69      	ldr	r3, [pc, #420]	; (8000b24 <MenuState+0x254>)
 8000980:	881b      	ldrh	r3, [r3, #0]
 8000982:	461a      	mov	r2, r3
 8000984:	4968      	ldr	r1, [pc, #416]	; (8000b28 <MenuState+0x258>)
 8000986:	4862      	ldr	r0, [pc, #392]	; (8000b10 <MenuState+0x240>)
 8000988:	f003 f86a 	bl	8003a60 <siprintf>
					HAL_UART_Transmit_DMA(&huart2, TxBuffer, strlen((char*)TxBuffer));
 800098c:	4860      	ldr	r0, [pc, #384]	; (8000b10 <MenuState+0x240>)
 800098e:	f7ff fc27 	bl	80001e0 <strlen>
 8000992:	4603      	mov	r3, r0
 8000994:	b29b      	uxth	r3, r3
 8000996:	461a      	mov	r2, r3
 8000998:	495d      	ldr	r1, [pc, #372]	; (8000b10 <MenuState+0x240>)
 800099a:	485e      	ldr	r0, [pc, #376]	; (8000b14 <MenuState+0x244>)
 800099c:	f001 fe96 	bl	80026cc <HAL_UART_Transmit_DMA>
			break;
 80009a0:	e0ad      	b.n	8000afe <MenuState+0x22e>
				else if(RxBuffer[0] == 's'){
 80009a2:	4b59      	ldr	r3, [pc, #356]	; (8000b08 <MenuState+0x238>)
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	2b73      	cmp	r3, #115	; 0x73
 80009a8:	d11b      	bne.n	80009e2 <MenuState+0x112>
					if (LEDHz > 1){
 80009aa:	4b5e      	ldr	r3, [pc, #376]	; (8000b24 <MenuState+0x254>)
 80009ac:	881b      	ldrh	r3, [r3, #0]
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d905      	bls.n	80009be <MenuState+0xee>
					LEDHz -= 1;
 80009b2:	4b5c      	ldr	r3, [pc, #368]	; (8000b24 <MenuState+0x254>)
 80009b4:	881b      	ldrh	r3, [r3, #0]
 80009b6:	3b01      	subs	r3, #1
 80009b8:	b29a      	uxth	r2, r3
 80009ba:	4b5a      	ldr	r3, [pc, #360]	; (8000b24 <MenuState+0x254>)
 80009bc:	801a      	strh	r2, [r3, #0]
					sprintf((char*)TxBuffer,"\r\n[ LED Control ]\r\n---------------\r\n{a} + 1 LED Hz\r\n{s} - 1 LED Hz\r\n{d} Turn on/off\r\n{x} back \r\n---------------\r\nLED Hz set to %d\r\n\r\n\r\n", LEDHz);
 80009be:	4b59      	ldr	r3, [pc, #356]	; (8000b24 <MenuState+0x254>)
 80009c0:	881b      	ldrh	r3, [r3, #0]
 80009c2:	461a      	mov	r2, r3
 80009c4:	4958      	ldr	r1, [pc, #352]	; (8000b28 <MenuState+0x258>)
 80009c6:	4852      	ldr	r0, [pc, #328]	; (8000b10 <MenuState+0x240>)
 80009c8:	f003 f84a 	bl	8003a60 <siprintf>
					HAL_UART_Transmit_DMA(&huart2, TxBuffer, strlen((char*)TxBuffer));
 80009cc:	4850      	ldr	r0, [pc, #320]	; (8000b10 <MenuState+0x240>)
 80009ce:	f7ff fc07 	bl	80001e0 <strlen>
 80009d2:	4603      	mov	r3, r0
 80009d4:	b29b      	uxth	r3, r3
 80009d6:	461a      	mov	r2, r3
 80009d8:	494d      	ldr	r1, [pc, #308]	; (8000b10 <MenuState+0x240>)
 80009da:	484e      	ldr	r0, [pc, #312]	; (8000b14 <MenuState+0x244>)
 80009dc:	f001 fe76 	bl	80026cc <HAL_UART_Transmit_DMA>
			break;
 80009e0:	e08d      	b.n	8000afe <MenuState+0x22e>
				else if(RxBuffer[0] == 'd'){
 80009e2:	4b49      	ldr	r3, [pc, #292]	; (8000b08 <MenuState+0x238>)
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	2b64      	cmp	r3, #100	; 0x64
 80009e8:	d136      	bne.n	8000a58 <MenuState+0x188>
					if(ledstatus == 1){
 80009ea:	4b50      	ldr	r3, [pc, #320]	; (8000b2c <MenuState+0x25c>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	2b01      	cmp	r3, #1
 80009f0:	d119      	bne.n	8000a26 <MenuState+0x156>
						ledstatus = 0;
 80009f2:	4b4e      	ldr	r3, [pc, #312]	; (8000b2c <MenuState+0x25c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
						HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009f8:	2200      	movs	r2, #0
 80009fa:	2120      	movs	r1, #32
 80009fc:	484c      	ldr	r0, [pc, #304]	; (8000b30 <MenuState+0x260>)
 80009fe:	f001 f94b 	bl	8001c98 <HAL_GPIO_WritePin>
						sprintf((char*)TxBuffer,"\r\n[ LED Control ]\r\n---------------\r\n{a} + 1 LED Hz\r\n{s} - 1 LED Hz\r\n{d} Turn on/off\r\n{x} back \r\n---------------\r\nLED turned off\r\n\r\n\r\n", LEDHz);
 8000a02:	4b48      	ldr	r3, [pc, #288]	; (8000b24 <MenuState+0x254>)
 8000a04:	881b      	ldrh	r3, [r3, #0]
 8000a06:	461a      	mov	r2, r3
 8000a08:	494a      	ldr	r1, [pc, #296]	; (8000b34 <MenuState+0x264>)
 8000a0a:	4841      	ldr	r0, [pc, #260]	; (8000b10 <MenuState+0x240>)
 8000a0c:	f003 f828 	bl	8003a60 <siprintf>
						HAL_UART_Transmit_DMA(&huart2, TxBuffer, strlen((char*)TxBuffer));
 8000a10:	483f      	ldr	r0, [pc, #252]	; (8000b10 <MenuState+0x240>)
 8000a12:	f7ff fbe5 	bl	80001e0 <strlen>
 8000a16:	4603      	mov	r3, r0
 8000a18:	b29b      	uxth	r3, r3
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	493c      	ldr	r1, [pc, #240]	; (8000b10 <MenuState+0x240>)
 8000a1e:	483d      	ldr	r0, [pc, #244]	; (8000b14 <MenuState+0x244>)
 8000a20:	f001 fe54 	bl	80026cc <HAL_UART_Transmit_DMA>
			break;
 8000a24:	e06b      	b.n	8000afe <MenuState+0x22e>
					else if(ledstatus == 0){
 8000a26:	4b41      	ldr	r3, [pc, #260]	; (8000b2c <MenuState+0x25c>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d167      	bne.n	8000afe <MenuState+0x22e>
						ledstatus = 1;
 8000a2e:	4b3f      	ldr	r3, [pc, #252]	; (8000b2c <MenuState+0x25c>)
 8000a30:	2201      	movs	r2, #1
 8000a32:	601a      	str	r2, [r3, #0]
						sprintf((char*)TxBuffer,"\r\n[ LED Control ]\r\n---------------\r\n{a} + 1 LED Hz\r\n{s} - 1 LED Hz\r\n{d} Turn on/off\r\n{x} back \r\n---------------\r\nLED turned on\r\nLED Hz set to %d\r\n\r\n", LEDHz);
 8000a34:	4b3b      	ldr	r3, [pc, #236]	; (8000b24 <MenuState+0x254>)
 8000a36:	881b      	ldrh	r3, [r3, #0]
 8000a38:	461a      	mov	r2, r3
 8000a3a:	493f      	ldr	r1, [pc, #252]	; (8000b38 <MenuState+0x268>)
 8000a3c:	4834      	ldr	r0, [pc, #208]	; (8000b10 <MenuState+0x240>)
 8000a3e:	f003 f80f 	bl	8003a60 <siprintf>
						HAL_UART_Transmit_DMA(&huart2, TxBuffer, strlen((char*)TxBuffer));
 8000a42:	4833      	ldr	r0, [pc, #204]	; (8000b10 <MenuState+0x240>)
 8000a44:	f7ff fbcc 	bl	80001e0 <strlen>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	b29b      	uxth	r3, r3
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	4930      	ldr	r1, [pc, #192]	; (8000b10 <MenuState+0x240>)
 8000a50:	4830      	ldr	r0, [pc, #192]	; (8000b14 <MenuState+0x244>)
 8000a52:	f001 fe3b 	bl	80026cc <HAL_UART_Transmit_DMA>
			break;
 8000a56:	e052      	b.n	8000afe <MenuState+0x22e>
				else if(RxBuffer[0] == 'x'){
 8000a58:	4b2b      	ldr	r3, [pc, #172]	; (8000b08 <MenuState+0x238>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	2b78      	cmp	r3, #120	; 0x78
 8000a5e:	d111      	bne.n	8000a84 <MenuState+0x1b4>
					  sprintf((char*)TxBuffer,"Choose your menu\r\n-----------------\r\n{0} LED Control\r\n{1} Button Status\r\n-----------------\r\n\r\n\r\n\r\n\r\n");
 8000a60:	4936      	ldr	r1, [pc, #216]	; (8000b3c <MenuState+0x26c>)
 8000a62:	482b      	ldr	r0, [pc, #172]	; (8000b10 <MenuState+0x240>)
 8000a64:	f002 fffc 	bl	8003a60 <siprintf>
				    HAL_UART_Transmit_DMA(&huart2, TxBuffer, strlen((char*)TxBuffer));
 8000a68:	4829      	ldr	r0, [pc, #164]	; (8000b10 <MenuState+0x240>)
 8000a6a:	f7ff fbb9 	bl	80001e0 <strlen>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	b29b      	uxth	r3, r3
 8000a72:	461a      	mov	r2, r3
 8000a74:	4926      	ldr	r1, [pc, #152]	; (8000b10 <MenuState+0x240>)
 8000a76:	4827      	ldr	r0, [pc, #156]	; (8000b14 <MenuState+0x244>)
 8000a78:	f001 fe28 	bl	80026cc <HAL_UART_Transmit_DMA>
					State = Menu;
 8000a7c:	4b21      	ldr	r3, [pc, #132]	; (8000b04 <MenuState+0x234>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	701a      	strb	r2, [r3, #0]
			break;
 8000a82:	e03c      	b.n	8000afe <MenuState+0x22e>
					sprintf((char*)TxBuffer,"\r\n[ LED Control ]\r\n---------------\r\n{a} + 1 LED Hz\r\n{s} - 1 LED Hz\r\n{d} Turn on/off\r\n{x} back \r\n---------------\r\n!!!Wrong button!!!\r\n\r\n\r\n", LEDHz);
 8000a84:	4b27      	ldr	r3, [pc, #156]	; (8000b24 <MenuState+0x254>)
 8000a86:	881b      	ldrh	r3, [r3, #0]
 8000a88:	461a      	mov	r2, r3
 8000a8a:	492d      	ldr	r1, [pc, #180]	; (8000b40 <MenuState+0x270>)
 8000a8c:	4820      	ldr	r0, [pc, #128]	; (8000b10 <MenuState+0x240>)
 8000a8e:	f002 ffe7 	bl	8003a60 <siprintf>
					HAL_UART_Transmit_DMA(&huart2, TxBuffer, strlen((char*)TxBuffer));
 8000a92:	481f      	ldr	r0, [pc, #124]	; (8000b10 <MenuState+0x240>)
 8000a94:	f7ff fba4 	bl	80001e0 <strlen>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	b29b      	uxth	r3, r3
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	491c      	ldr	r1, [pc, #112]	; (8000b10 <MenuState+0x240>)
 8000aa0:	481c      	ldr	r0, [pc, #112]	; (8000b14 <MenuState+0x244>)
 8000aa2:	f001 fe13 	bl	80026cc <HAL_UART_Transmit_DMA>
			break;
 8000aa6:	e02a      	b.n	8000afe <MenuState+0x22e>
				buttonstatusmode = 1;
 8000aa8:	4b1b      	ldr	r3, [pc, #108]	; (8000b18 <MenuState+0x248>)
 8000aaa:	2201      	movs	r2, #1
 8000aac:	601a      	str	r2, [r3, #0]
				if(RxBuffer[0] == 'x'){
 8000aae:	4b16      	ldr	r3, [pc, #88]	; (8000b08 <MenuState+0x238>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	2b78      	cmp	r3, #120	; 0x78
 8000ab4:	d114      	bne.n	8000ae0 <MenuState+0x210>
					buttonstatusmode = 0;
 8000ab6:	4b18      	ldr	r3, [pc, #96]	; (8000b18 <MenuState+0x248>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
					  sprintf((char*)TxBuffer,"Choose your menu\r\n-----------------\r\n{0} LED Control\r\n{1} Button Status\r\n-----------------\r\n\r\n\r\n\r\n\r\n");
 8000abc:	491f      	ldr	r1, [pc, #124]	; (8000b3c <MenuState+0x26c>)
 8000abe:	4814      	ldr	r0, [pc, #80]	; (8000b10 <MenuState+0x240>)
 8000ac0:	f002 ffce 	bl	8003a60 <siprintf>
					HAL_UART_Transmit_DMA(&huart2, TxBuffer, strlen((char*)TxBuffer));
 8000ac4:	4812      	ldr	r0, [pc, #72]	; (8000b10 <MenuState+0x240>)
 8000ac6:	f7ff fb8b 	bl	80001e0 <strlen>
 8000aca:	4603      	mov	r3, r0
 8000acc:	b29b      	uxth	r3, r3
 8000ace:	461a      	mov	r2, r3
 8000ad0:	490f      	ldr	r1, [pc, #60]	; (8000b10 <MenuState+0x240>)
 8000ad2:	4810      	ldr	r0, [pc, #64]	; (8000b14 <MenuState+0x244>)
 8000ad4:	f001 fdfa 	bl	80026cc <HAL_UART_Transmit_DMA>
					State = Menu;
 8000ad8:	4b0a      	ldr	r3, [pc, #40]	; (8000b04 <MenuState+0x234>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	701a      	strb	r2, [r3, #0]
			break;
 8000ade:	e00f      	b.n	8000b00 <MenuState+0x230>
					  sprintf((char*)TxBuffer,"Choose your menu\r\n-----------------\r\n{0} LED Control\r\n{1} Button Status\r\n-----------------\r\n!!!Wrong button!!!\r\n\r\n\r\n\r\n");
 8000ae0:	4918      	ldr	r1, [pc, #96]	; (8000b44 <MenuState+0x274>)
 8000ae2:	480b      	ldr	r0, [pc, #44]	; (8000b10 <MenuState+0x240>)
 8000ae4:	f002 ffbc 	bl	8003a60 <siprintf>
					HAL_UART_Transmit_DMA(&huart2, TxBuffer, strlen((char*)TxBuffer));
 8000ae8:	4809      	ldr	r0, [pc, #36]	; (8000b10 <MenuState+0x240>)
 8000aea:	f7ff fb79 	bl	80001e0 <strlen>
 8000aee:	4603      	mov	r3, r0
 8000af0:	b29b      	uxth	r3, r3
 8000af2:	461a      	mov	r2, r3
 8000af4:	4906      	ldr	r1, [pc, #24]	; (8000b10 <MenuState+0x240>)
 8000af6:	4807      	ldr	r0, [pc, #28]	; (8000b14 <MenuState+0x244>)
 8000af8:	f001 fde8 	bl	80026cc <HAL_UART_Transmit_DMA>
			break;
 8000afc:	e000      	b.n	8000b00 <MenuState+0x230>
			break;
 8000afe:	bf00      	nop
}
 8000b00:	bf00      	nop
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	2000026c 	.word	0x2000026c
 8000b08:	20000198 	.word	0x20000198
 8000b0c:	080043c0 	.word	0x080043c0
 8000b10:	2000019c 	.word	0x2000019c
 8000b14:	20000094 	.word	0x20000094
 8000b18:	20000264 	.word	0x20000264
 8000b1c:	08004438 	.word	0x08004438
 8000b20:	0800449c 	.word	0x0800449c
 8000b24:	20000000 	.word	0x20000000
 8000b28:	08004518 	.word	0x08004518
 8000b2c:	20000004 	.word	0x20000004
 8000b30:	40020000 	.word	0x40020000
 8000b34:	080045a0 	.word	0x080045a0
 8000b38:	08004628 	.word	0x08004628
 8000b3c:	080046c0 	.word	0x080046c0
 8000b40:	08004728 	.word	0x08004728
 8000b44:	080047b4 	.word	0x080047b4

08000b48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b4c:	b672      	cpsid	i
}
 8000b4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <Error_Handler+0x8>
	...

08000b54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	607b      	str	r3, [r7, #4]
 8000b5e:	4b10      	ldr	r3, [pc, #64]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b62:	4a0f      	ldr	r2, [pc, #60]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b68:	6453      	str	r3, [r2, #68]	; 0x44
 8000b6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	603b      	str	r3, [r7, #0]
 8000b7a:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7e:	4a08      	ldr	r2, [pc, #32]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b84:	6413      	str	r3, [r2, #64]	; 0x40
 8000b86:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b8e:	603b      	str	r3, [r7, #0]
 8000b90:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b92:	2007      	movs	r0, #7
 8000b94:	f000 fab8 	bl	8001108 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40023800 	.word	0x40023800

08000ba4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08a      	sub	sp, #40	; 0x28
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
 8000bba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a4c      	ldr	r2, [pc, #304]	; (8000cf4 <HAL_UART_MspInit+0x150>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	f040 8091 	bne.w	8000cea <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bc8:	2300      	movs	r3, #0
 8000bca:	613b      	str	r3, [r7, #16]
 8000bcc:	4b4a      	ldr	r3, [pc, #296]	; (8000cf8 <HAL_UART_MspInit+0x154>)
 8000bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd0:	4a49      	ldr	r2, [pc, #292]	; (8000cf8 <HAL_UART_MspInit+0x154>)
 8000bd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bd6:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd8:	4b47      	ldr	r3, [pc, #284]	; (8000cf8 <HAL_UART_MspInit+0x154>)
 8000bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000be0:	613b      	str	r3, [r7, #16]
 8000be2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be4:	2300      	movs	r3, #0
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	4b43      	ldr	r3, [pc, #268]	; (8000cf8 <HAL_UART_MspInit+0x154>)
 8000bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bec:	4a42      	ldr	r2, [pc, #264]	; (8000cf8 <HAL_UART_MspInit+0x154>)
 8000bee:	f043 0301 	orr.w	r3, r3, #1
 8000bf2:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf4:	4b40      	ldr	r3, [pc, #256]	; (8000cf8 <HAL_UART_MspInit+0x154>)
 8000bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf8:	f003 0301 	and.w	r3, r3, #1
 8000bfc:	60fb      	str	r3, [r7, #12]
 8000bfe:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c00:	230c      	movs	r3, #12
 8000c02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c04:	2302      	movs	r3, #2
 8000c06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c0c:	2303      	movs	r3, #3
 8000c0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c10:	2307      	movs	r3, #7
 8000c12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4838      	ldr	r0, [pc, #224]	; (8000cfc <HAL_UART_MspInit+0x158>)
 8000c1c:	f000 feb8 	bl	8001990 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000c20:	4b37      	ldr	r3, [pc, #220]	; (8000d00 <HAL_UART_MspInit+0x15c>)
 8000c22:	4a38      	ldr	r2, [pc, #224]	; (8000d04 <HAL_UART_MspInit+0x160>)
 8000c24:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000c26:	4b36      	ldr	r3, [pc, #216]	; (8000d00 <HAL_UART_MspInit+0x15c>)
 8000c28:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c2c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c2e:	4b34      	ldr	r3, [pc, #208]	; (8000d00 <HAL_UART_MspInit+0x15c>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c34:	4b32      	ldr	r3, [pc, #200]	; (8000d00 <HAL_UART_MspInit+0x15c>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c3a:	4b31      	ldr	r3, [pc, #196]	; (8000d00 <HAL_UART_MspInit+0x15c>)
 8000c3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c40:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c42:	4b2f      	ldr	r3, [pc, #188]	; (8000d00 <HAL_UART_MspInit+0x15c>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c48:	4b2d      	ldr	r3, [pc, #180]	; (8000d00 <HAL_UART_MspInit+0x15c>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000c4e:	4b2c      	ldr	r3, [pc, #176]	; (8000d00 <HAL_UART_MspInit+0x15c>)
 8000c50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c54:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c56:	4b2a      	ldr	r3, [pc, #168]	; (8000d00 <HAL_UART_MspInit+0x15c>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c5c:	4b28      	ldr	r3, [pc, #160]	; (8000d00 <HAL_UART_MspInit+0x15c>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000c62:	4827      	ldr	r0, [pc, #156]	; (8000d00 <HAL_UART_MspInit+0x15c>)
 8000c64:	f000 fa92 	bl	800118c <HAL_DMA_Init>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000c6e:	f7ff ff6b 	bl	8000b48 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4a22      	ldr	r2, [pc, #136]	; (8000d00 <HAL_UART_MspInit+0x15c>)
 8000c76:	639a      	str	r2, [r3, #56]	; 0x38
 8000c78:	4a21      	ldr	r2, [pc, #132]	; (8000d00 <HAL_UART_MspInit+0x15c>)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000c7e:	4b22      	ldr	r3, [pc, #136]	; (8000d08 <HAL_UART_MspInit+0x164>)
 8000c80:	4a22      	ldr	r2, [pc, #136]	; (8000d0c <HAL_UART_MspInit+0x168>)
 8000c82:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000c84:	4b20      	ldr	r3, [pc, #128]	; (8000d08 <HAL_UART_MspInit+0x164>)
 8000c86:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c8a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c8c:	4b1e      	ldr	r3, [pc, #120]	; (8000d08 <HAL_UART_MspInit+0x164>)
 8000c8e:	2240      	movs	r2, #64	; 0x40
 8000c90:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c92:	4b1d      	ldr	r3, [pc, #116]	; (8000d08 <HAL_UART_MspInit+0x164>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c98:	4b1b      	ldr	r3, [pc, #108]	; (8000d08 <HAL_UART_MspInit+0x164>)
 8000c9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c9e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ca0:	4b19      	ldr	r3, [pc, #100]	; (8000d08 <HAL_UART_MspInit+0x164>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ca6:	4b18      	ldr	r3, [pc, #96]	; (8000d08 <HAL_UART_MspInit+0x164>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000cac:	4b16      	ldr	r3, [pc, #88]	; (8000d08 <HAL_UART_MspInit+0x164>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000cb2:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <HAL_UART_MspInit+0x164>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cb8:	4b13      	ldr	r3, [pc, #76]	; (8000d08 <HAL_UART_MspInit+0x164>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000cbe:	4812      	ldr	r0, [pc, #72]	; (8000d08 <HAL_UART_MspInit+0x164>)
 8000cc0:	f000 fa64 	bl	800118c <HAL_DMA_Init>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8000cca:	f7ff ff3d 	bl	8000b48 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4a0d      	ldr	r2, [pc, #52]	; (8000d08 <HAL_UART_MspInit+0x164>)
 8000cd2:	635a      	str	r2, [r3, #52]	; 0x34
 8000cd4:	4a0c      	ldr	r2, [pc, #48]	; (8000d08 <HAL_UART_MspInit+0x164>)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2100      	movs	r1, #0
 8000cde:	2026      	movs	r0, #38	; 0x26
 8000ce0:	f000 fa1d 	bl	800111e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ce4:	2026      	movs	r0, #38	; 0x26
 8000ce6:	f000 fa36 	bl	8001156 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cea:	bf00      	nop
 8000cec:	3728      	adds	r7, #40	; 0x28
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40004400 	.word	0x40004400
 8000cf8:	40023800 	.word	0x40023800
 8000cfc:	40020000 	.word	0x40020000
 8000d00:	200000d8 	.word	0x200000d8
 8000d04:	40026088 	.word	0x40026088
 8000d08:	20000138 	.word	0x20000138
 8000d0c:	400260a0 	.word	0x400260a0

08000d10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d14:	e7fe      	b.n	8000d14 <NMI_Handler+0x4>

08000d16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d1a:	e7fe      	b.n	8000d1a <HardFault_Handler+0x4>

08000d1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d20:	e7fe      	b.n	8000d20 <MemManage_Handler+0x4>

08000d22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d26:	e7fe      	b.n	8000d26 <BusFault_Handler+0x4>

08000d28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d2c:	e7fe      	b.n	8000d2c <UsageFault_Handler+0x4>

08000d2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr

08000d4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr

08000d58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d5c:	f000 f8e4 	bl	8000f28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d60:	bf00      	nop
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000d68:	4802      	ldr	r0, [pc, #8]	; (8000d74 <DMA1_Stream5_IRQHandler+0x10>)
 8000d6a:	f000 fba7 	bl	80014bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	200000d8 	.word	0x200000d8

08000d78 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000d7c:	4802      	ldr	r0, [pc, #8]	; (8000d88 <DMA1_Stream6_IRQHandler+0x10>)
 8000d7e:	f000 fb9d 	bl	80014bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20000138 	.word	0x20000138

08000d8c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d90:	4802      	ldr	r0, [pc, #8]	; (8000d9c <USART2_IRQHandler+0x10>)
 8000d92:	f001 fd49 	bl	8002828 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000094 	.word	0x20000094

08000da0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b086      	sub	sp, #24
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000da8:	4a14      	ldr	r2, [pc, #80]	; (8000dfc <_sbrk+0x5c>)
 8000daa:	4b15      	ldr	r3, [pc, #84]	; (8000e00 <_sbrk+0x60>)
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000db4:	4b13      	ldr	r3, [pc, #76]	; (8000e04 <_sbrk+0x64>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d102      	bne.n	8000dc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dbc:	4b11      	ldr	r3, [pc, #68]	; (8000e04 <_sbrk+0x64>)
 8000dbe:	4a12      	ldr	r2, [pc, #72]	; (8000e08 <_sbrk+0x68>)
 8000dc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dc2:	4b10      	ldr	r3, [pc, #64]	; (8000e04 <_sbrk+0x64>)
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4413      	add	r3, r2
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d207      	bcs.n	8000de0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dd0:	f002 fe14 	bl	80039fc <__errno>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	220c      	movs	r2, #12
 8000dd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dda:	f04f 33ff 	mov.w	r3, #4294967295
 8000dde:	e009      	b.n	8000df4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000de0:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <_sbrk+0x64>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000de6:	4b07      	ldr	r3, [pc, #28]	; (8000e04 <_sbrk+0x64>)
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4413      	add	r3, r2
 8000dee:	4a05      	ldr	r2, [pc, #20]	; (8000e04 <_sbrk+0x64>)
 8000df0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000df2:	68fb      	ldr	r3, [r7, #12]
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3718      	adds	r7, #24
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	20020000 	.word	0x20020000
 8000e00:	00000400 	.word	0x00000400
 8000e04:	20000270 	.word	0x20000270
 8000e08:	20000288 	.word	0x20000288

08000e0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e10:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <SystemInit+0x20>)
 8000e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e16:	4a05      	ldr	r2, [pc, #20]	; (8000e2c <SystemInit+0x20>)
 8000e18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e68 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e34:	480d      	ldr	r0, [pc, #52]	; (8000e6c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e36:	490e      	ldr	r1, [pc, #56]	; (8000e70 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e38:	4a0e      	ldr	r2, [pc, #56]	; (8000e74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e3c:	e002      	b.n	8000e44 <LoopCopyDataInit>

08000e3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e42:	3304      	adds	r3, #4

08000e44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e48:	d3f9      	bcc.n	8000e3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e4a:	4a0b      	ldr	r2, [pc, #44]	; (8000e78 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e4c:	4c0b      	ldr	r4, [pc, #44]	; (8000e7c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e50:	e001      	b.n	8000e56 <LoopFillZerobss>

08000e52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e54:	3204      	adds	r2, #4

08000e56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e58:	d3fb      	bcc.n	8000e52 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e5a:	f7ff ffd7 	bl	8000e0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e5e:	f002 fdd3 	bl	8003a08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e62:	f7ff fb97 	bl	8000594 <main>
  bx  lr    
 8000e66:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e70:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000e74:	080048f0 	.word	0x080048f0
  ldr r2, =_sbss
 8000e78:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000e7c:	20000288 	.word	0x20000288

08000e80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e80:	e7fe      	b.n	8000e80 <ADC_IRQHandler>
	...

08000e84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e88:	4b0e      	ldr	r3, [pc, #56]	; (8000ec4 <HAL_Init+0x40>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a0d      	ldr	r2, [pc, #52]	; (8000ec4 <HAL_Init+0x40>)
 8000e8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e94:	4b0b      	ldr	r3, [pc, #44]	; (8000ec4 <HAL_Init+0x40>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a0a      	ldr	r2, [pc, #40]	; (8000ec4 <HAL_Init+0x40>)
 8000e9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ea0:	4b08      	ldr	r3, [pc, #32]	; (8000ec4 <HAL_Init+0x40>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a07      	ldr	r2, [pc, #28]	; (8000ec4 <HAL_Init+0x40>)
 8000ea6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eaa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eac:	2003      	movs	r0, #3
 8000eae:	f000 f92b 	bl	8001108 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eb2:	2000      	movs	r0, #0
 8000eb4:	f000 f808 	bl	8000ec8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eb8:	f7ff fe4c 	bl	8000b54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40023c00 	.word	0x40023c00

08000ec8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ed0:	4b12      	ldr	r3, [pc, #72]	; (8000f1c <HAL_InitTick+0x54>)
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	4b12      	ldr	r3, [pc, #72]	; (8000f20 <HAL_InitTick+0x58>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	4619      	mov	r1, r3
 8000eda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ede:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f000 f943 	bl	8001172 <HAL_SYSTICK_Config>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e00e      	b.n	8000f14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2b0f      	cmp	r3, #15
 8000efa:	d80a      	bhi.n	8000f12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000efc:	2200      	movs	r2, #0
 8000efe:	6879      	ldr	r1, [r7, #4]
 8000f00:	f04f 30ff 	mov.w	r0, #4294967295
 8000f04:	f000 f90b 	bl	800111e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f08:	4a06      	ldr	r2, [pc, #24]	; (8000f24 <HAL_InitTick+0x5c>)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	e000      	b.n	8000f14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20000008 	.word	0x20000008
 8000f20:	20000010 	.word	0x20000010
 8000f24:	2000000c 	.word	0x2000000c

08000f28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f2c:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <HAL_IncTick+0x20>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	461a      	mov	r2, r3
 8000f32:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <HAL_IncTick+0x24>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4413      	add	r3, r2
 8000f38:	4a04      	ldr	r2, [pc, #16]	; (8000f4c <HAL_IncTick+0x24>)
 8000f3a:	6013      	str	r3, [r2, #0]
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	20000010 	.word	0x20000010
 8000f4c:	20000274 	.word	0x20000274

08000f50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  return uwTick;
 8000f54:	4b03      	ldr	r3, [pc, #12]	; (8000f64 <HAL_GetTick+0x14>)
 8000f56:	681b      	ldr	r3, [r3, #0]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	20000274 	.word	0x20000274

08000f68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f003 0307 	and.w	r3, r3, #7
 8000f76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f78:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <__NVIC_SetPriorityGrouping+0x44>)
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f7e:	68ba      	ldr	r2, [r7, #8]
 8000f80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f84:	4013      	ands	r3, r2
 8000f86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f9a:	4a04      	ldr	r2, [pc, #16]	; (8000fac <__NVIC_SetPriorityGrouping+0x44>)
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	60d3      	str	r3, [r2, #12]
}
 8000fa0:	bf00      	nop
 8000fa2:	3714      	adds	r7, #20
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	e000ed00 	.word	0xe000ed00

08000fb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fb4:	4b04      	ldr	r3, [pc, #16]	; (8000fc8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	0a1b      	lsrs	r3, r3, #8
 8000fba:	f003 0307 	and.w	r3, r3, #7
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	db0b      	blt.n	8000ff6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	f003 021f 	and.w	r2, r3, #31
 8000fe4:	4907      	ldr	r1, [pc, #28]	; (8001004 <__NVIC_EnableIRQ+0x38>)
 8000fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fea:	095b      	lsrs	r3, r3, #5
 8000fec:	2001      	movs	r0, #1
 8000fee:	fa00 f202 	lsl.w	r2, r0, r2
 8000ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ff6:	bf00      	nop
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	e000e100 	.word	0xe000e100

08001008 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	6039      	str	r1, [r7, #0]
 8001012:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001018:	2b00      	cmp	r3, #0
 800101a:	db0a      	blt.n	8001032 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	b2da      	uxtb	r2, r3
 8001020:	490c      	ldr	r1, [pc, #48]	; (8001054 <__NVIC_SetPriority+0x4c>)
 8001022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001026:	0112      	lsls	r2, r2, #4
 8001028:	b2d2      	uxtb	r2, r2
 800102a:	440b      	add	r3, r1
 800102c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001030:	e00a      	b.n	8001048 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	b2da      	uxtb	r2, r3
 8001036:	4908      	ldr	r1, [pc, #32]	; (8001058 <__NVIC_SetPriority+0x50>)
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	f003 030f 	and.w	r3, r3, #15
 800103e:	3b04      	subs	r3, #4
 8001040:	0112      	lsls	r2, r2, #4
 8001042:	b2d2      	uxtb	r2, r2
 8001044:	440b      	add	r3, r1
 8001046:	761a      	strb	r2, [r3, #24]
}
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	e000e100 	.word	0xe000e100
 8001058:	e000ed00 	.word	0xe000ed00

0800105c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800105c:	b480      	push	{r7}
 800105e:	b089      	sub	sp, #36	; 0x24
 8001060:	af00      	add	r7, sp, #0
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	f003 0307 	and.w	r3, r3, #7
 800106e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	f1c3 0307 	rsb	r3, r3, #7
 8001076:	2b04      	cmp	r3, #4
 8001078:	bf28      	it	cs
 800107a:	2304      	movcs	r3, #4
 800107c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	3304      	adds	r3, #4
 8001082:	2b06      	cmp	r3, #6
 8001084:	d902      	bls.n	800108c <NVIC_EncodePriority+0x30>
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	3b03      	subs	r3, #3
 800108a:	e000      	b.n	800108e <NVIC_EncodePriority+0x32>
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001090:	f04f 32ff 	mov.w	r2, #4294967295
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	43da      	mvns	r2, r3
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	401a      	ands	r2, r3
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010a4:	f04f 31ff 	mov.w	r1, #4294967295
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	fa01 f303 	lsl.w	r3, r1, r3
 80010ae:	43d9      	mvns	r1, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b4:	4313      	orrs	r3, r2
         );
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3724      	adds	r7, #36	; 0x24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
	...

080010c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3b01      	subs	r3, #1
 80010d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010d4:	d301      	bcc.n	80010da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010d6:	2301      	movs	r3, #1
 80010d8:	e00f      	b.n	80010fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010da:	4a0a      	ldr	r2, [pc, #40]	; (8001104 <SysTick_Config+0x40>)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3b01      	subs	r3, #1
 80010e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010e2:	210f      	movs	r1, #15
 80010e4:	f04f 30ff 	mov.w	r0, #4294967295
 80010e8:	f7ff ff8e 	bl	8001008 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010ec:	4b05      	ldr	r3, [pc, #20]	; (8001104 <SysTick_Config+0x40>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010f2:	4b04      	ldr	r3, [pc, #16]	; (8001104 <SysTick_Config+0x40>)
 80010f4:	2207      	movs	r2, #7
 80010f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	e000e010 	.word	0xe000e010

08001108 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f7ff ff29 	bl	8000f68 <__NVIC_SetPriorityGrouping>
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800111e:	b580      	push	{r7, lr}
 8001120:	b086      	sub	sp, #24
 8001122:	af00      	add	r7, sp, #0
 8001124:	4603      	mov	r3, r0
 8001126:	60b9      	str	r1, [r7, #8]
 8001128:	607a      	str	r2, [r7, #4]
 800112a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001130:	f7ff ff3e 	bl	8000fb0 <__NVIC_GetPriorityGrouping>
 8001134:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	68b9      	ldr	r1, [r7, #8]
 800113a:	6978      	ldr	r0, [r7, #20]
 800113c:	f7ff ff8e 	bl	800105c <NVIC_EncodePriority>
 8001140:	4602      	mov	r2, r0
 8001142:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001146:	4611      	mov	r1, r2
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff ff5d 	bl	8001008 <__NVIC_SetPriority>
}
 800114e:	bf00      	nop
 8001150:	3718      	adds	r7, #24
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b082      	sub	sp, #8
 800115a:	af00      	add	r7, sp, #0
 800115c:	4603      	mov	r3, r0
 800115e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff ff31 	bl	8000fcc <__NVIC_EnableIRQ>
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b082      	sub	sp, #8
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f7ff ffa2 	bl	80010c4 <SysTick_Config>
 8001180:	4603      	mov	r3, r0
}
 8001182:	4618      	mov	r0, r3
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
	...

0800118c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b086      	sub	sp, #24
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001194:	2300      	movs	r3, #0
 8001196:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001198:	f7ff feda 	bl	8000f50 <HAL_GetTick>
 800119c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d101      	bne.n	80011a8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	e099      	b.n	80012dc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2202      	movs	r2, #2
 80011ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2200      	movs	r2, #0
 80011b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f022 0201 	bic.w	r2, r2, #1
 80011c6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011c8:	e00f      	b.n	80011ea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011ca:	f7ff fec1 	bl	8000f50 <HAL_GetTick>
 80011ce:	4602      	mov	r2, r0
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	2b05      	cmp	r3, #5
 80011d6:	d908      	bls.n	80011ea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2220      	movs	r2, #32
 80011dc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2203      	movs	r2, #3
 80011e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80011e6:	2303      	movs	r3, #3
 80011e8:	e078      	b.n	80012dc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f003 0301 	and.w	r3, r3, #1
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d1e8      	bne.n	80011ca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001200:	697a      	ldr	r2, [r7, #20]
 8001202:	4b38      	ldr	r3, [pc, #224]	; (80012e4 <HAL_DMA_Init+0x158>)
 8001204:	4013      	ands	r3, r2
 8001206:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	685a      	ldr	r2, [r3, #4]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001216:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	691b      	ldr	r3, [r3, #16]
 800121c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001222:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800122e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6a1b      	ldr	r3, [r3, #32]
 8001234:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001236:	697a      	ldr	r2, [r7, #20]
 8001238:	4313      	orrs	r3, r2
 800123a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001240:	2b04      	cmp	r3, #4
 8001242:	d107      	bne.n	8001254 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124c:	4313      	orrs	r3, r2
 800124e:	697a      	ldr	r2, [r7, #20]
 8001250:	4313      	orrs	r3, r2
 8001252:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	697a      	ldr	r2, [r7, #20]
 800125a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	695b      	ldr	r3, [r3, #20]
 8001262:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	f023 0307 	bic.w	r3, r3, #7
 800126a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001270:	697a      	ldr	r2, [r7, #20]
 8001272:	4313      	orrs	r3, r2
 8001274:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800127a:	2b04      	cmp	r3, #4
 800127c:	d117      	bne.n	80012ae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001282:	697a      	ldr	r2, [r7, #20]
 8001284:	4313      	orrs	r3, r2
 8001286:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800128c:	2b00      	cmp	r3, #0
 800128e:	d00e      	beq.n	80012ae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f000 fb01 	bl	8001898 <DMA_CheckFifoParam>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d008      	beq.n	80012ae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2240      	movs	r2, #64	; 0x40
 80012a0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2201      	movs	r2, #1
 80012a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80012aa:	2301      	movs	r3, #1
 80012ac:	e016      	b.n	80012dc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	697a      	ldr	r2, [r7, #20]
 80012b4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f000 fab8 	bl	800182c <DMA_CalcBaseAndBitshift>
 80012bc:	4603      	mov	r3, r0
 80012be:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012c4:	223f      	movs	r2, #63	; 0x3f
 80012c6:	409a      	lsls	r2, r3
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2200      	movs	r2, #0
 80012d0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2201      	movs	r2, #1
 80012d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80012da:	2300      	movs	r3, #0
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3718      	adds	r7, #24
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	f010803f 	.word	0xf010803f

080012e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
 80012f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80012f6:	2300      	movs	r3, #0
 80012f8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012fe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001306:	2b01      	cmp	r3, #1
 8001308:	d101      	bne.n	800130e <HAL_DMA_Start_IT+0x26>
 800130a:	2302      	movs	r3, #2
 800130c:	e040      	b.n	8001390 <HAL_DMA_Start_IT+0xa8>
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	2201      	movs	r2, #1
 8001312:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800131c:	b2db      	uxtb	r3, r3
 800131e:	2b01      	cmp	r3, #1
 8001320:	d12f      	bne.n	8001382 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	2202      	movs	r2, #2
 8001326:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	2200      	movs	r2, #0
 800132e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	68b9      	ldr	r1, [r7, #8]
 8001336:	68f8      	ldr	r0, [r7, #12]
 8001338:	f000 fa4a 	bl	80017d0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001340:	223f      	movs	r2, #63	; 0x3f
 8001342:	409a      	lsls	r2, r3
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f042 0216 	orr.w	r2, r2, #22
 8001356:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135c:	2b00      	cmp	r3, #0
 800135e:	d007      	beq.n	8001370 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f042 0208 	orr.w	r2, r2, #8
 800136e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f042 0201 	orr.w	r2, r2, #1
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	e005      	b.n	800138e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	2200      	movs	r2, #0
 8001386:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800138a:	2302      	movs	r3, #2
 800138c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800138e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001390:	4618      	mov	r0, r3
 8001392:	3718      	adds	r7, #24
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013a4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80013a6:	f7ff fdd3 	bl	8000f50 <HAL_GetTick>
 80013aa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d008      	beq.n	80013ca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2280      	movs	r2, #128	; 0x80
 80013bc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e052      	b.n	8001470 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f022 0216 	bic.w	r2, r2, #22
 80013d8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	695a      	ldr	r2, [r3, #20]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013e8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d103      	bne.n	80013fa <HAL_DMA_Abort+0x62>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d007      	beq.n	800140a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f022 0208 	bic.w	r2, r2, #8
 8001408:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f022 0201 	bic.w	r2, r2, #1
 8001418:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800141a:	e013      	b.n	8001444 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800141c:	f7ff fd98 	bl	8000f50 <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b05      	cmp	r3, #5
 8001428:	d90c      	bls.n	8001444 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2220      	movs	r2, #32
 800142e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2203      	movs	r2, #3
 8001434:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2200      	movs	r2, #0
 800143c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001440:	2303      	movs	r3, #3
 8001442:	e015      	b.n	8001470 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	2b00      	cmp	r3, #0
 8001450:	d1e4      	bne.n	800141c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001456:	223f      	movs	r2, #63	; 0x3f
 8001458:	409a      	lsls	r2, r3
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2201      	movs	r2, #1
 8001462:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2200      	movs	r2, #0
 800146a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800146e:	2300      	movs	r3, #0
}
 8001470:	4618      	mov	r0, r3
 8001472:	3710      	adds	r7, #16
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001486:	b2db      	uxtb	r3, r3
 8001488:	2b02      	cmp	r3, #2
 800148a:	d004      	beq.n	8001496 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2280      	movs	r2, #128	; 0x80
 8001490:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e00c      	b.n	80014b0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2205      	movs	r2, #5
 800149a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f022 0201 	bic.w	r2, r2, #1
 80014ac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80014ae:	2300      	movs	r3, #0
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80014c4:	2300      	movs	r3, #0
 80014c6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80014c8:	4b8e      	ldr	r3, [pc, #568]	; (8001704 <HAL_DMA_IRQHandler+0x248>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a8e      	ldr	r2, [pc, #568]	; (8001708 <HAL_DMA_IRQHandler+0x24c>)
 80014ce:	fba2 2303 	umull	r2, r3, r2, r3
 80014d2:	0a9b      	lsrs	r3, r3, #10
 80014d4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014da:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014e6:	2208      	movs	r2, #8
 80014e8:	409a      	lsls	r2, r3
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	4013      	ands	r3, r2
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d01a      	beq.n	8001528 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0304 	and.w	r3, r3, #4
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d013      	beq.n	8001528 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f022 0204 	bic.w	r2, r2, #4
 800150e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001514:	2208      	movs	r2, #8
 8001516:	409a      	lsls	r2, r3
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001520:	f043 0201 	orr.w	r2, r3, #1
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800152c:	2201      	movs	r2, #1
 800152e:	409a      	lsls	r2, r3
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	4013      	ands	r3, r2
 8001534:	2b00      	cmp	r3, #0
 8001536:	d012      	beq.n	800155e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	695b      	ldr	r3, [r3, #20]
 800153e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001542:	2b00      	cmp	r3, #0
 8001544:	d00b      	beq.n	800155e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800154a:	2201      	movs	r2, #1
 800154c:	409a      	lsls	r2, r3
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001556:	f043 0202 	orr.w	r2, r3, #2
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001562:	2204      	movs	r2, #4
 8001564:	409a      	lsls	r2, r3
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	4013      	ands	r3, r2
 800156a:	2b00      	cmp	r3, #0
 800156c:	d012      	beq.n	8001594 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0302 	and.w	r3, r3, #2
 8001578:	2b00      	cmp	r3, #0
 800157a:	d00b      	beq.n	8001594 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001580:	2204      	movs	r2, #4
 8001582:	409a      	lsls	r2, r3
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800158c:	f043 0204 	orr.w	r2, r3, #4
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001598:	2210      	movs	r2, #16
 800159a:	409a      	lsls	r2, r3
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	4013      	ands	r3, r2
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d043      	beq.n	800162c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0308 	and.w	r3, r3, #8
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d03c      	beq.n	800162c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015b6:	2210      	movs	r2, #16
 80015b8:	409a      	lsls	r2, r3
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d018      	beq.n	80015fe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d108      	bne.n	80015ec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d024      	beq.n	800162c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	4798      	blx	r3
 80015ea:	e01f      	b.n	800162c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d01b      	beq.n	800162c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	4798      	blx	r3
 80015fc:	e016      	b.n	800162c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001608:	2b00      	cmp	r3, #0
 800160a:	d107      	bne.n	800161c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f022 0208 	bic.w	r2, r2, #8
 800161a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001620:	2b00      	cmp	r3, #0
 8001622:	d003      	beq.n	800162c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001630:	2220      	movs	r2, #32
 8001632:	409a      	lsls	r2, r3
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	4013      	ands	r3, r2
 8001638:	2b00      	cmp	r3, #0
 800163a:	f000 808f 	beq.w	800175c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0310 	and.w	r3, r3, #16
 8001648:	2b00      	cmp	r3, #0
 800164a:	f000 8087 	beq.w	800175c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001652:	2220      	movs	r2, #32
 8001654:	409a      	lsls	r2, r3
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001660:	b2db      	uxtb	r3, r3
 8001662:	2b05      	cmp	r3, #5
 8001664:	d136      	bne.n	80016d4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f022 0216 	bic.w	r2, r2, #22
 8001674:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	695a      	ldr	r2, [r3, #20]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001684:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168a:	2b00      	cmp	r3, #0
 800168c:	d103      	bne.n	8001696 <HAL_DMA_IRQHandler+0x1da>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001692:	2b00      	cmp	r3, #0
 8001694:	d007      	beq.n	80016a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f022 0208 	bic.w	r2, r2, #8
 80016a4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016aa:	223f      	movs	r2, #63	; 0x3f
 80016ac:	409a      	lsls	r2, r3
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2201      	movs	r2, #1
 80016b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2200      	movs	r2, #0
 80016be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d07e      	beq.n	80017c8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	4798      	blx	r3
        }
        return;
 80016d2:	e079      	b.n	80017c8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d01d      	beq.n	800171e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d10d      	bne.n	800170c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d031      	beq.n	800175c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	4798      	blx	r3
 8001700:	e02c      	b.n	800175c <HAL_DMA_IRQHandler+0x2a0>
 8001702:	bf00      	nop
 8001704:	20000008 	.word	0x20000008
 8001708:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001710:	2b00      	cmp	r3, #0
 8001712:	d023      	beq.n	800175c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	4798      	blx	r3
 800171c:	e01e      	b.n	800175c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001728:	2b00      	cmp	r3, #0
 800172a:	d10f      	bne.n	800174c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f022 0210 	bic.w	r2, r2, #16
 800173a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2201      	movs	r2, #1
 8001740:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2200      	movs	r2, #0
 8001748:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001750:	2b00      	cmp	r3, #0
 8001752:	d003      	beq.n	800175c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001760:	2b00      	cmp	r3, #0
 8001762:	d032      	beq.n	80017ca <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001768:	f003 0301 	and.w	r3, r3, #1
 800176c:	2b00      	cmp	r3, #0
 800176e:	d022      	beq.n	80017b6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2205      	movs	r2, #5
 8001774:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f022 0201 	bic.w	r2, r2, #1
 8001786:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	3301      	adds	r3, #1
 800178c:	60bb      	str	r3, [r7, #8]
 800178e:	697a      	ldr	r2, [r7, #20]
 8001790:	429a      	cmp	r2, r3
 8001792:	d307      	bcc.n	80017a4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d1f2      	bne.n	8001788 <HAL_DMA_IRQHandler+0x2cc>
 80017a2:	e000      	b.n	80017a6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80017a4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2201      	movs	r2, #1
 80017aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2200      	movs	r2, #0
 80017b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d005      	beq.n	80017ca <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	4798      	blx	r3
 80017c6:	e000      	b.n	80017ca <HAL_DMA_IRQHandler+0x30e>
        return;
 80017c8:	bf00      	nop
    }
  }
}
 80017ca:	3718      	adds	r7, #24
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
 80017dc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80017ec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	683a      	ldr	r2, [r7, #0]
 80017f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	2b40      	cmp	r3, #64	; 0x40
 80017fc:	d108      	bne.n	8001810 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	68ba      	ldr	r2, [r7, #8]
 800180c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800180e:	e007      	b.n	8001820 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	68ba      	ldr	r2, [r7, #8]
 8001816:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	60da      	str	r2, [r3, #12]
}
 8001820:	bf00      	nop
 8001822:	3714      	adds	r7, #20
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800182c:	b480      	push	{r7}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	b2db      	uxtb	r3, r3
 800183a:	3b10      	subs	r3, #16
 800183c:	4a14      	ldr	r2, [pc, #80]	; (8001890 <DMA_CalcBaseAndBitshift+0x64>)
 800183e:	fba2 2303 	umull	r2, r3, r2, r3
 8001842:	091b      	lsrs	r3, r3, #4
 8001844:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001846:	4a13      	ldr	r2, [pc, #76]	; (8001894 <DMA_CalcBaseAndBitshift+0x68>)
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	4413      	add	r3, r2
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	461a      	mov	r2, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	2b03      	cmp	r3, #3
 8001858:	d909      	bls.n	800186e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001862:	f023 0303 	bic.w	r3, r3, #3
 8001866:	1d1a      	adds	r2, r3, #4
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	659a      	str	r2, [r3, #88]	; 0x58
 800186c:	e007      	b.n	800187e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001876:	f023 0303 	bic.w	r3, r3, #3
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001882:	4618      	mov	r0, r3
 8001884:	3714      	adds	r7, #20
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	aaaaaaab 	.word	0xaaaaaaab
 8001894:	080048a4 	.word	0x080048a4

08001898 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018a0:	2300      	movs	r3, #0
 80018a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	699b      	ldr	r3, [r3, #24]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d11f      	bne.n	80018f2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	2b03      	cmp	r3, #3
 80018b6:	d856      	bhi.n	8001966 <DMA_CheckFifoParam+0xce>
 80018b8:	a201      	add	r2, pc, #4	; (adr r2, 80018c0 <DMA_CheckFifoParam+0x28>)
 80018ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018be:	bf00      	nop
 80018c0:	080018d1 	.word	0x080018d1
 80018c4:	080018e3 	.word	0x080018e3
 80018c8:	080018d1 	.word	0x080018d1
 80018cc:	08001967 	.word	0x08001967
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d046      	beq.n	800196a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80018e0:	e043      	b.n	800196a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80018ea:	d140      	bne.n	800196e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80018f0:	e03d      	b.n	800196e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	699b      	ldr	r3, [r3, #24]
 80018f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018fa:	d121      	bne.n	8001940 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	2b03      	cmp	r3, #3
 8001900:	d837      	bhi.n	8001972 <DMA_CheckFifoParam+0xda>
 8001902:	a201      	add	r2, pc, #4	; (adr r2, 8001908 <DMA_CheckFifoParam+0x70>)
 8001904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001908:	08001919 	.word	0x08001919
 800190c:	0800191f 	.word	0x0800191f
 8001910:	08001919 	.word	0x08001919
 8001914:	08001931 	.word	0x08001931
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	73fb      	strb	r3, [r7, #15]
      break;
 800191c:	e030      	b.n	8001980 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001922:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d025      	beq.n	8001976 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800192e:	e022      	b.n	8001976 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001934:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001938:	d11f      	bne.n	800197a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800193e:	e01c      	b.n	800197a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	2b02      	cmp	r3, #2
 8001944:	d903      	bls.n	800194e <DMA_CheckFifoParam+0xb6>
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	2b03      	cmp	r3, #3
 800194a:	d003      	beq.n	8001954 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800194c:	e018      	b.n	8001980 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	73fb      	strb	r3, [r7, #15]
      break;
 8001952:	e015      	b.n	8001980 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001958:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d00e      	beq.n	800197e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	73fb      	strb	r3, [r7, #15]
      break;
 8001964:	e00b      	b.n	800197e <DMA_CheckFifoParam+0xe6>
      break;
 8001966:	bf00      	nop
 8001968:	e00a      	b.n	8001980 <DMA_CheckFifoParam+0xe8>
      break;
 800196a:	bf00      	nop
 800196c:	e008      	b.n	8001980 <DMA_CheckFifoParam+0xe8>
      break;
 800196e:	bf00      	nop
 8001970:	e006      	b.n	8001980 <DMA_CheckFifoParam+0xe8>
      break;
 8001972:	bf00      	nop
 8001974:	e004      	b.n	8001980 <DMA_CheckFifoParam+0xe8>
      break;
 8001976:	bf00      	nop
 8001978:	e002      	b.n	8001980 <DMA_CheckFifoParam+0xe8>
      break;   
 800197a:	bf00      	nop
 800197c:	e000      	b.n	8001980 <DMA_CheckFifoParam+0xe8>
      break;
 800197e:	bf00      	nop
    }
  } 
  
  return status; 
 8001980:	7bfb      	ldrb	r3, [r7, #15]
}
 8001982:	4618      	mov	r0, r3
 8001984:	3714      	adds	r7, #20
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop

08001990 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001990:	b480      	push	{r7}
 8001992:	b089      	sub	sp, #36	; 0x24
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800199a:	2300      	movs	r3, #0
 800199c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800199e:	2300      	movs	r3, #0
 80019a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019a2:	2300      	movs	r3, #0
 80019a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019a6:	2300      	movs	r3, #0
 80019a8:	61fb      	str	r3, [r7, #28]
 80019aa:	e159      	b.n	8001c60 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019ac:	2201      	movs	r2, #1
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	697a      	ldr	r2, [r7, #20]
 80019bc:	4013      	ands	r3, r2
 80019be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	f040 8148 	bne.w	8001c5a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f003 0303 	and.w	r3, r3, #3
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d005      	beq.n	80019e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d130      	bne.n	8001a44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	2203      	movs	r2, #3
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	43db      	mvns	r3, r3
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	4013      	ands	r3, r2
 80019f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	68da      	ldr	r2, [r3, #12]
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	fa02 f303 	lsl.w	r3, r2, r3
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a18:	2201      	movs	r2, #1
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	43db      	mvns	r3, r3
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	4013      	ands	r3, r2
 8001a26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	091b      	lsrs	r3, r3, #4
 8001a2e:	f003 0201 	and.w	r2, r3, #1
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f003 0303 	and.w	r3, r3, #3
 8001a4c:	2b03      	cmp	r3, #3
 8001a4e:	d017      	beq.n	8001a80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	2203      	movs	r2, #3
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	43db      	mvns	r3, r3
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	4013      	ands	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	689a      	ldr	r2, [r3, #8]
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	005b      	lsls	r3, r3, #1
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f003 0303 	and.w	r3, r3, #3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d123      	bne.n	8001ad4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	08da      	lsrs	r2, r3, #3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	3208      	adds	r2, #8
 8001a94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	f003 0307 	and.w	r3, r3, #7
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	220f      	movs	r2, #15
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	4013      	ands	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	691a      	ldr	r2, [r3, #16]
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	f003 0307 	and.w	r3, r3, #7
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	08da      	lsrs	r2, r3, #3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	3208      	adds	r2, #8
 8001ace:	69b9      	ldr	r1, [r7, #24]
 8001ad0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	2203      	movs	r2, #3
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f003 0203 	and.w	r2, r3, #3
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	f000 80a2 	beq.w	8001c5a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	60fb      	str	r3, [r7, #12]
 8001b1a:	4b57      	ldr	r3, [pc, #348]	; (8001c78 <HAL_GPIO_Init+0x2e8>)
 8001b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1e:	4a56      	ldr	r2, [pc, #344]	; (8001c78 <HAL_GPIO_Init+0x2e8>)
 8001b20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b24:	6453      	str	r3, [r2, #68]	; 0x44
 8001b26:	4b54      	ldr	r3, [pc, #336]	; (8001c78 <HAL_GPIO_Init+0x2e8>)
 8001b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b32:	4a52      	ldr	r2, [pc, #328]	; (8001c7c <HAL_GPIO_Init+0x2ec>)
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	089b      	lsrs	r3, r3, #2
 8001b38:	3302      	adds	r3, #2
 8001b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	f003 0303 	and.w	r3, r3, #3
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	220f      	movs	r2, #15
 8001b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4e:	43db      	mvns	r3, r3
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	4013      	ands	r3, r2
 8001b54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a49      	ldr	r2, [pc, #292]	; (8001c80 <HAL_GPIO_Init+0x2f0>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d019      	beq.n	8001b92 <HAL_GPIO_Init+0x202>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a48      	ldr	r2, [pc, #288]	; (8001c84 <HAL_GPIO_Init+0x2f4>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d013      	beq.n	8001b8e <HAL_GPIO_Init+0x1fe>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a47      	ldr	r2, [pc, #284]	; (8001c88 <HAL_GPIO_Init+0x2f8>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d00d      	beq.n	8001b8a <HAL_GPIO_Init+0x1fa>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a46      	ldr	r2, [pc, #280]	; (8001c8c <HAL_GPIO_Init+0x2fc>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d007      	beq.n	8001b86 <HAL_GPIO_Init+0x1f6>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a45      	ldr	r2, [pc, #276]	; (8001c90 <HAL_GPIO_Init+0x300>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d101      	bne.n	8001b82 <HAL_GPIO_Init+0x1f2>
 8001b7e:	2304      	movs	r3, #4
 8001b80:	e008      	b.n	8001b94 <HAL_GPIO_Init+0x204>
 8001b82:	2307      	movs	r3, #7
 8001b84:	e006      	b.n	8001b94 <HAL_GPIO_Init+0x204>
 8001b86:	2303      	movs	r3, #3
 8001b88:	e004      	b.n	8001b94 <HAL_GPIO_Init+0x204>
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	e002      	b.n	8001b94 <HAL_GPIO_Init+0x204>
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e000      	b.n	8001b94 <HAL_GPIO_Init+0x204>
 8001b92:	2300      	movs	r3, #0
 8001b94:	69fa      	ldr	r2, [r7, #28]
 8001b96:	f002 0203 	and.w	r2, r2, #3
 8001b9a:	0092      	lsls	r2, r2, #2
 8001b9c:	4093      	lsls	r3, r2
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ba4:	4935      	ldr	r1, [pc, #212]	; (8001c7c <HAL_GPIO_Init+0x2ec>)
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	089b      	lsrs	r3, r3, #2
 8001baa:	3302      	adds	r3, #2
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bb2:	4b38      	ldr	r3, [pc, #224]	; (8001c94 <HAL_GPIO_Init+0x304>)
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	43db      	mvns	r3, r3
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d003      	beq.n	8001bd6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bd6:	4a2f      	ldr	r2, [pc, #188]	; (8001c94 <HAL_GPIO_Init+0x304>)
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bdc:	4b2d      	ldr	r3, [pc, #180]	; (8001c94 <HAL_GPIO_Init+0x304>)
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	43db      	mvns	r3, r3
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	4013      	ands	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d003      	beq.n	8001c00 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c00:	4a24      	ldr	r2, [pc, #144]	; (8001c94 <HAL_GPIO_Init+0x304>)
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c06:	4b23      	ldr	r3, [pc, #140]	; (8001c94 <HAL_GPIO_Init+0x304>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	43db      	mvns	r3, r3
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	4013      	ands	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d003      	beq.n	8001c2a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c22:	69ba      	ldr	r2, [r7, #24]
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c2a:	4a1a      	ldr	r2, [pc, #104]	; (8001c94 <HAL_GPIO_Init+0x304>)
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c30:	4b18      	ldr	r3, [pc, #96]	; (8001c94 <HAL_GPIO_Init+0x304>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	43db      	mvns	r3, r3
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d003      	beq.n	8001c54 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c54:	4a0f      	ldr	r2, [pc, #60]	; (8001c94 <HAL_GPIO_Init+0x304>)
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	61fb      	str	r3, [r7, #28]
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	2b0f      	cmp	r3, #15
 8001c64:	f67f aea2 	bls.w	80019ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c68:	bf00      	nop
 8001c6a:	bf00      	nop
 8001c6c:	3724      	adds	r7, #36	; 0x24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	40023800 	.word	0x40023800
 8001c7c:	40013800 	.word	0x40013800
 8001c80:	40020000 	.word	0x40020000
 8001c84:	40020400 	.word	0x40020400
 8001c88:	40020800 	.word	0x40020800
 8001c8c:	40020c00 	.word	0x40020c00
 8001c90:	40021000 	.word	0x40021000
 8001c94:	40013c00 	.word	0x40013c00

08001c98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	807b      	strh	r3, [r7, #2]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ca8:	787b      	ldrb	r3, [r7, #1]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d003      	beq.n	8001cb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cae:	887a      	ldrh	r2, [r7, #2]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cb4:	e003      	b.n	8001cbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cb6:	887b      	ldrh	r3, [r7, #2]
 8001cb8:	041a      	lsls	r2, r3, #16
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	619a      	str	r2, [r3, #24]
}
 8001cbe:	bf00      	nop
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr

08001cca <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	b085      	sub	sp, #20
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	695b      	ldr	r3, [r3, #20]
 8001cda:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001cdc:	887a      	ldrh	r2, [r7, #2]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	041a      	lsls	r2, r3, #16
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	43d9      	mvns	r1, r3
 8001ce8:	887b      	ldrh	r3, [r7, #2]
 8001cea:	400b      	ands	r3, r1
 8001cec:	431a      	orrs	r2, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	619a      	str	r2, [r3, #24]
}
 8001cf2:	bf00      	nop
 8001cf4:	3714      	adds	r7, #20
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
	...

08001d00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b086      	sub	sp, #24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d101      	bne.n	8001d12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e267      	b.n	80021e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d075      	beq.n	8001e0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d1e:	4b88      	ldr	r3, [pc, #544]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f003 030c 	and.w	r3, r3, #12
 8001d26:	2b04      	cmp	r3, #4
 8001d28:	d00c      	beq.n	8001d44 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d2a:	4b85      	ldr	r3, [pc, #532]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d32:	2b08      	cmp	r3, #8
 8001d34:	d112      	bne.n	8001d5c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d36:	4b82      	ldr	r3, [pc, #520]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d42:	d10b      	bne.n	8001d5c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d44:	4b7e      	ldr	r3, [pc, #504]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d05b      	beq.n	8001e08 <HAL_RCC_OscConfig+0x108>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d157      	bne.n	8001e08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e242      	b.n	80021e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d64:	d106      	bne.n	8001d74 <HAL_RCC_OscConfig+0x74>
 8001d66:	4b76      	ldr	r3, [pc, #472]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a75      	ldr	r2, [pc, #468]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d70:	6013      	str	r3, [r2, #0]
 8001d72:	e01d      	b.n	8001db0 <HAL_RCC_OscConfig+0xb0>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d7c:	d10c      	bne.n	8001d98 <HAL_RCC_OscConfig+0x98>
 8001d7e:	4b70      	ldr	r3, [pc, #448]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a6f      	ldr	r2, [pc, #444]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001d84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d88:	6013      	str	r3, [r2, #0]
 8001d8a:	4b6d      	ldr	r3, [pc, #436]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a6c      	ldr	r2, [pc, #432]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001d90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d94:	6013      	str	r3, [r2, #0]
 8001d96:	e00b      	b.n	8001db0 <HAL_RCC_OscConfig+0xb0>
 8001d98:	4b69      	ldr	r3, [pc, #420]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a68      	ldr	r2, [pc, #416]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001d9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001da2:	6013      	str	r3, [r2, #0]
 8001da4:	4b66      	ldr	r3, [pc, #408]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a65      	ldr	r2, [pc, #404]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001daa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d013      	beq.n	8001de0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db8:	f7ff f8ca 	bl	8000f50 <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dc0:	f7ff f8c6 	bl	8000f50 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b64      	cmp	r3, #100	; 0x64
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e207      	b.n	80021e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dd2:	4b5b      	ldr	r3, [pc, #364]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d0f0      	beq.n	8001dc0 <HAL_RCC_OscConfig+0xc0>
 8001dde:	e014      	b.n	8001e0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de0:	f7ff f8b6 	bl	8000f50 <HAL_GetTick>
 8001de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001de8:	f7ff f8b2 	bl	8000f50 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b64      	cmp	r3, #100	; 0x64
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e1f3      	b.n	80021e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dfa:	4b51      	ldr	r3, [pc, #324]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1f0      	bne.n	8001de8 <HAL_RCC_OscConfig+0xe8>
 8001e06:	e000      	b.n	8001e0a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d063      	beq.n	8001ede <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e16:	4b4a      	ldr	r3, [pc, #296]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f003 030c 	and.w	r3, r3, #12
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d00b      	beq.n	8001e3a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e22:	4b47      	ldr	r3, [pc, #284]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e2a:	2b08      	cmp	r3, #8
 8001e2c:	d11c      	bne.n	8001e68 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e2e:	4b44      	ldr	r3, [pc, #272]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d116      	bne.n	8001e68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e3a:	4b41      	ldr	r3, [pc, #260]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d005      	beq.n	8001e52 <HAL_RCC_OscConfig+0x152>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d001      	beq.n	8001e52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e1c7      	b.n	80021e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e52:	4b3b      	ldr	r3, [pc, #236]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	691b      	ldr	r3, [r3, #16]
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	4937      	ldr	r1, [pc, #220]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e66:	e03a      	b.n	8001ede <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d020      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e70:	4b34      	ldr	r3, [pc, #208]	; (8001f44 <HAL_RCC_OscConfig+0x244>)
 8001e72:	2201      	movs	r2, #1
 8001e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e76:	f7ff f86b 	bl	8000f50 <HAL_GetTick>
 8001e7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e7c:	e008      	b.n	8001e90 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e7e:	f7ff f867 	bl	8000f50 <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d901      	bls.n	8001e90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e1a8      	b.n	80021e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e90:	4b2b      	ldr	r3, [pc, #172]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0302 	and.w	r3, r3, #2
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d0f0      	beq.n	8001e7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e9c:	4b28      	ldr	r3, [pc, #160]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	691b      	ldr	r3, [r3, #16]
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	4925      	ldr	r1, [pc, #148]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001eac:	4313      	orrs	r3, r2
 8001eae:	600b      	str	r3, [r1, #0]
 8001eb0:	e015      	b.n	8001ede <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eb2:	4b24      	ldr	r3, [pc, #144]	; (8001f44 <HAL_RCC_OscConfig+0x244>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb8:	f7ff f84a 	bl	8000f50 <HAL_GetTick>
 8001ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ec0:	f7ff f846 	bl	8000f50 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e187      	b.n	80021e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ed2:	4b1b      	ldr	r3, [pc, #108]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1f0      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0308 	and.w	r3, r3, #8
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d036      	beq.n	8001f58 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	695b      	ldr	r3, [r3, #20]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d016      	beq.n	8001f20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ef2:	4b15      	ldr	r3, [pc, #84]	; (8001f48 <HAL_RCC_OscConfig+0x248>)
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ef8:	f7ff f82a 	bl	8000f50 <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001efe:	e008      	b.n	8001f12 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f00:	f7ff f826 	bl	8000f50 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e167      	b.n	80021e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f12:	4b0b      	ldr	r3, [pc, #44]	; (8001f40 <HAL_RCC_OscConfig+0x240>)
 8001f14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d0f0      	beq.n	8001f00 <HAL_RCC_OscConfig+0x200>
 8001f1e:	e01b      	b.n	8001f58 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f20:	4b09      	ldr	r3, [pc, #36]	; (8001f48 <HAL_RCC_OscConfig+0x248>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f26:	f7ff f813 	bl	8000f50 <HAL_GetTick>
 8001f2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f2c:	e00e      	b.n	8001f4c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f2e:	f7ff f80f 	bl	8000f50 <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d907      	bls.n	8001f4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e150      	b.n	80021e2 <HAL_RCC_OscConfig+0x4e2>
 8001f40:	40023800 	.word	0x40023800
 8001f44:	42470000 	.word	0x42470000
 8001f48:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f4c:	4b88      	ldr	r3, [pc, #544]	; (8002170 <HAL_RCC_OscConfig+0x470>)
 8001f4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f50:	f003 0302 	and.w	r3, r3, #2
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d1ea      	bne.n	8001f2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0304 	and.w	r3, r3, #4
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	f000 8097 	beq.w	8002094 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f66:	2300      	movs	r3, #0
 8001f68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f6a:	4b81      	ldr	r3, [pc, #516]	; (8002170 <HAL_RCC_OscConfig+0x470>)
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d10f      	bne.n	8001f96 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	60bb      	str	r3, [r7, #8]
 8001f7a:	4b7d      	ldr	r3, [pc, #500]	; (8002170 <HAL_RCC_OscConfig+0x470>)
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7e:	4a7c      	ldr	r2, [pc, #496]	; (8002170 <HAL_RCC_OscConfig+0x470>)
 8001f80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f84:	6413      	str	r3, [r2, #64]	; 0x40
 8001f86:	4b7a      	ldr	r3, [pc, #488]	; (8002170 <HAL_RCC_OscConfig+0x470>)
 8001f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f8e:	60bb      	str	r3, [r7, #8]
 8001f90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f92:	2301      	movs	r3, #1
 8001f94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f96:	4b77      	ldr	r3, [pc, #476]	; (8002174 <HAL_RCC_OscConfig+0x474>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d118      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fa2:	4b74      	ldr	r3, [pc, #464]	; (8002174 <HAL_RCC_OscConfig+0x474>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a73      	ldr	r2, [pc, #460]	; (8002174 <HAL_RCC_OscConfig+0x474>)
 8001fa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fae:	f7fe ffcf 	bl	8000f50 <HAL_GetTick>
 8001fb2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fb4:	e008      	b.n	8001fc8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fb6:	f7fe ffcb 	bl	8000f50 <HAL_GetTick>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d901      	bls.n	8001fc8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e10c      	b.n	80021e2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fc8:	4b6a      	ldr	r3, [pc, #424]	; (8002174 <HAL_RCC_OscConfig+0x474>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d0f0      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d106      	bne.n	8001fea <HAL_RCC_OscConfig+0x2ea>
 8001fdc:	4b64      	ldr	r3, [pc, #400]	; (8002170 <HAL_RCC_OscConfig+0x470>)
 8001fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fe0:	4a63      	ldr	r2, [pc, #396]	; (8002170 <HAL_RCC_OscConfig+0x470>)
 8001fe2:	f043 0301 	orr.w	r3, r3, #1
 8001fe6:	6713      	str	r3, [r2, #112]	; 0x70
 8001fe8:	e01c      	b.n	8002024 <HAL_RCC_OscConfig+0x324>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	2b05      	cmp	r3, #5
 8001ff0:	d10c      	bne.n	800200c <HAL_RCC_OscConfig+0x30c>
 8001ff2:	4b5f      	ldr	r3, [pc, #380]	; (8002170 <HAL_RCC_OscConfig+0x470>)
 8001ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff6:	4a5e      	ldr	r2, [pc, #376]	; (8002170 <HAL_RCC_OscConfig+0x470>)
 8001ff8:	f043 0304 	orr.w	r3, r3, #4
 8001ffc:	6713      	str	r3, [r2, #112]	; 0x70
 8001ffe:	4b5c      	ldr	r3, [pc, #368]	; (8002170 <HAL_RCC_OscConfig+0x470>)
 8002000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002002:	4a5b      	ldr	r2, [pc, #364]	; (8002170 <HAL_RCC_OscConfig+0x470>)
 8002004:	f043 0301 	orr.w	r3, r3, #1
 8002008:	6713      	str	r3, [r2, #112]	; 0x70
 800200a:	e00b      	b.n	8002024 <HAL_RCC_OscConfig+0x324>
 800200c:	4b58      	ldr	r3, [pc, #352]	; (8002170 <HAL_RCC_OscConfig+0x470>)
 800200e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002010:	4a57      	ldr	r2, [pc, #348]	; (8002170 <HAL_RCC_OscConfig+0x470>)
 8002012:	f023 0301 	bic.w	r3, r3, #1
 8002016:	6713      	str	r3, [r2, #112]	; 0x70
 8002018:	4b55      	ldr	r3, [pc, #340]	; (8002170 <HAL_RCC_OscConfig+0x470>)
 800201a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800201c:	4a54      	ldr	r2, [pc, #336]	; (8002170 <HAL_RCC_OscConfig+0x470>)
 800201e:	f023 0304 	bic.w	r3, r3, #4
 8002022:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d015      	beq.n	8002058 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800202c:	f7fe ff90 	bl	8000f50 <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002032:	e00a      	b.n	800204a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002034:	f7fe ff8c 	bl	8000f50 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002042:	4293      	cmp	r3, r2
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e0cb      	b.n	80021e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800204a:	4b49      	ldr	r3, [pc, #292]	; (8002170 <HAL_RCC_OscConfig+0x470>)
 800204c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d0ee      	beq.n	8002034 <HAL_RCC_OscConfig+0x334>
 8002056:	e014      	b.n	8002082 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002058:	f7fe ff7a 	bl	8000f50 <HAL_GetTick>
 800205c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800205e:	e00a      	b.n	8002076 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002060:	f7fe ff76 	bl	8000f50 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	f241 3288 	movw	r2, #5000	; 0x1388
 800206e:	4293      	cmp	r3, r2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e0b5      	b.n	80021e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002076:	4b3e      	ldr	r3, [pc, #248]	; (8002170 <HAL_RCC_OscConfig+0x470>)
 8002078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d1ee      	bne.n	8002060 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002082:	7dfb      	ldrb	r3, [r7, #23]
 8002084:	2b01      	cmp	r3, #1
 8002086:	d105      	bne.n	8002094 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002088:	4b39      	ldr	r3, [pc, #228]	; (8002170 <HAL_RCC_OscConfig+0x470>)
 800208a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208c:	4a38      	ldr	r2, [pc, #224]	; (8002170 <HAL_RCC_OscConfig+0x470>)
 800208e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002092:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	2b00      	cmp	r3, #0
 800209a:	f000 80a1 	beq.w	80021e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800209e:	4b34      	ldr	r3, [pc, #208]	; (8002170 <HAL_RCC_OscConfig+0x470>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f003 030c 	and.w	r3, r3, #12
 80020a6:	2b08      	cmp	r3, #8
 80020a8:	d05c      	beq.n	8002164 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	699b      	ldr	r3, [r3, #24]
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d141      	bne.n	8002136 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020b2:	4b31      	ldr	r3, [pc, #196]	; (8002178 <HAL_RCC_OscConfig+0x478>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b8:	f7fe ff4a 	bl	8000f50 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020c0:	f7fe ff46 	bl	8000f50 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e087      	b.n	80021e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020d2:	4b27      	ldr	r3, [pc, #156]	; (8002170 <HAL_RCC_OscConfig+0x470>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1f0      	bne.n	80020c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	69da      	ldr	r2, [r3, #28]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6a1b      	ldr	r3, [r3, #32]
 80020e6:	431a      	orrs	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ec:	019b      	lsls	r3, r3, #6
 80020ee:	431a      	orrs	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f4:	085b      	lsrs	r3, r3, #1
 80020f6:	3b01      	subs	r3, #1
 80020f8:	041b      	lsls	r3, r3, #16
 80020fa:	431a      	orrs	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002100:	061b      	lsls	r3, r3, #24
 8002102:	491b      	ldr	r1, [pc, #108]	; (8002170 <HAL_RCC_OscConfig+0x470>)
 8002104:	4313      	orrs	r3, r2
 8002106:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002108:	4b1b      	ldr	r3, [pc, #108]	; (8002178 <HAL_RCC_OscConfig+0x478>)
 800210a:	2201      	movs	r2, #1
 800210c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800210e:	f7fe ff1f 	bl	8000f50 <HAL_GetTick>
 8002112:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002114:	e008      	b.n	8002128 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002116:	f7fe ff1b 	bl	8000f50 <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	2b02      	cmp	r3, #2
 8002122:	d901      	bls.n	8002128 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e05c      	b.n	80021e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002128:	4b11      	ldr	r3, [pc, #68]	; (8002170 <HAL_RCC_OscConfig+0x470>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d0f0      	beq.n	8002116 <HAL_RCC_OscConfig+0x416>
 8002134:	e054      	b.n	80021e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002136:	4b10      	ldr	r3, [pc, #64]	; (8002178 <HAL_RCC_OscConfig+0x478>)
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800213c:	f7fe ff08 	bl	8000f50 <HAL_GetTick>
 8002140:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002142:	e008      	b.n	8002156 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002144:	f7fe ff04 	bl	8000f50 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b02      	cmp	r3, #2
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e045      	b.n	80021e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002156:	4b06      	ldr	r3, [pc, #24]	; (8002170 <HAL_RCC_OscConfig+0x470>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1f0      	bne.n	8002144 <HAL_RCC_OscConfig+0x444>
 8002162:	e03d      	b.n	80021e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	2b01      	cmp	r3, #1
 800216a:	d107      	bne.n	800217c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e038      	b.n	80021e2 <HAL_RCC_OscConfig+0x4e2>
 8002170:	40023800 	.word	0x40023800
 8002174:	40007000 	.word	0x40007000
 8002178:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800217c:	4b1b      	ldr	r3, [pc, #108]	; (80021ec <HAL_RCC_OscConfig+0x4ec>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d028      	beq.n	80021dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002194:	429a      	cmp	r2, r3
 8002196:	d121      	bne.n	80021dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d11a      	bne.n	80021dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021a6:	68fa      	ldr	r2, [r7, #12]
 80021a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80021ac:	4013      	ands	r3, r2
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d111      	bne.n	80021dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c2:	085b      	lsrs	r3, r3, #1
 80021c4:	3b01      	subs	r3, #1
 80021c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d107      	bne.n	80021dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021d8:	429a      	cmp	r2, r3
 80021da:	d001      	beq.n	80021e0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e000      	b.n	80021e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3718      	adds	r7, #24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40023800 	.word	0x40023800

080021f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d101      	bne.n	8002204 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e0cc      	b.n	800239e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002204:	4b68      	ldr	r3, [pc, #416]	; (80023a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0307 	and.w	r3, r3, #7
 800220c:	683a      	ldr	r2, [r7, #0]
 800220e:	429a      	cmp	r2, r3
 8002210:	d90c      	bls.n	800222c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002212:	4b65      	ldr	r3, [pc, #404]	; (80023a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	b2d2      	uxtb	r2, r2
 8002218:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800221a:	4b63      	ldr	r3, [pc, #396]	; (80023a8 <HAL_RCC_ClockConfig+0x1b8>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0307 	and.w	r3, r3, #7
 8002222:	683a      	ldr	r2, [r7, #0]
 8002224:	429a      	cmp	r2, r3
 8002226:	d001      	beq.n	800222c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e0b8      	b.n	800239e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	2b00      	cmp	r3, #0
 8002236:	d020      	beq.n	800227a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0304 	and.w	r3, r3, #4
 8002240:	2b00      	cmp	r3, #0
 8002242:	d005      	beq.n	8002250 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002244:	4b59      	ldr	r3, [pc, #356]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	4a58      	ldr	r2, [pc, #352]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 800224a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800224e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0308 	and.w	r3, r3, #8
 8002258:	2b00      	cmp	r3, #0
 800225a:	d005      	beq.n	8002268 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800225c:	4b53      	ldr	r3, [pc, #332]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	4a52      	ldr	r2, [pc, #328]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 8002262:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002266:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002268:	4b50      	ldr	r3, [pc, #320]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	494d      	ldr	r1, [pc, #308]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 8002276:	4313      	orrs	r3, r2
 8002278:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	2b00      	cmp	r3, #0
 8002284:	d044      	beq.n	8002310 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	2b01      	cmp	r3, #1
 800228c:	d107      	bne.n	800229e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800228e:	4b47      	ldr	r3, [pc, #284]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d119      	bne.n	80022ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e07f      	b.n	800239e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d003      	beq.n	80022ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022aa:	2b03      	cmp	r3, #3
 80022ac:	d107      	bne.n	80022be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ae:	4b3f      	ldr	r3, [pc, #252]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d109      	bne.n	80022ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e06f      	b.n	800239e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022be:	4b3b      	ldr	r3, [pc, #236]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e067      	b.n	800239e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022ce:	4b37      	ldr	r3, [pc, #220]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f023 0203 	bic.w	r2, r3, #3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	4934      	ldr	r1, [pc, #208]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022e0:	f7fe fe36 	bl	8000f50 <HAL_GetTick>
 80022e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022e6:	e00a      	b.n	80022fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022e8:	f7fe fe32 	bl	8000f50 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e04f      	b.n	800239e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022fe:	4b2b      	ldr	r3, [pc, #172]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f003 020c 	and.w	r2, r3, #12
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	429a      	cmp	r2, r3
 800230e:	d1eb      	bne.n	80022e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002310:	4b25      	ldr	r3, [pc, #148]	; (80023a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0307 	and.w	r3, r3, #7
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	429a      	cmp	r2, r3
 800231c:	d20c      	bcs.n	8002338 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800231e:	4b22      	ldr	r3, [pc, #136]	; (80023a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	b2d2      	uxtb	r2, r2
 8002324:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002326:	4b20      	ldr	r3, [pc, #128]	; (80023a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0307 	and.w	r3, r3, #7
 800232e:	683a      	ldr	r2, [r7, #0]
 8002330:	429a      	cmp	r2, r3
 8002332:	d001      	beq.n	8002338 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e032      	b.n	800239e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0304 	and.w	r3, r3, #4
 8002340:	2b00      	cmp	r3, #0
 8002342:	d008      	beq.n	8002356 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002344:	4b19      	ldr	r3, [pc, #100]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	4916      	ldr	r1, [pc, #88]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 8002352:	4313      	orrs	r3, r2
 8002354:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0308 	and.w	r3, r3, #8
 800235e:	2b00      	cmp	r3, #0
 8002360:	d009      	beq.n	8002376 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002362:	4b12      	ldr	r3, [pc, #72]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	490e      	ldr	r1, [pc, #56]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 8002372:	4313      	orrs	r3, r2
 8002374:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002376:	f000 f821 	bl	80023bc <HAL_RCC_GetSysClockFreq>
 800237a:	4602      	mov	r2, r0
 800237c:	4b0b      	ldr	r3, [pc, #44]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	091b      	lsrs	r3, r3, #4
 8002382:	f003 030f 	and.w	r3, r3, #15
 8002386:	490a      	ldr	r1, [pc, #40]	; (80023b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002388:	5ccb      	ldrb	r3, [r1, r3]
 800238a:	fa22 f303 	lsr.w	r3, r2, r3
 800238e:	4a09      	ldr	r2, [pc, #36]	; (80023b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002390:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002392:	4b09      	ldr	r3, [pc, #36]	; (80023b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4618      	mov	r0, r3
 8002398:	f7fe fd96 	bl	8000ec8 <HAL_InitTick>

  return HAL_OK;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	40023c00 	.word	0x40023c00
 80023ac:	40023800 	.word	0x40023800
 80023b0:	0800488c 	.word	0x0800488c
 80023b4:	20000008 	.word	0x20000008
 80023b8:	2000000c 	.word	0x2000000c

080023bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023c0:	b094      	sub	sp, #80	; 0x50
 80023c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80023c4:	2300      	movs	r3, #0
 80023c6:	647b      	str	r3, [r7, #68]	; 0x44
 80023c8:	2300      	movs	r3, #0
 80023ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023cc:	2300      	movs	r3, #0
 80023ce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80023d0:	2300      	movs	r3, #0
 80023d2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023d4:	4b79      	ldr	r3, [pc, #484]	; (80025bc <HAL_RCC_GetSysClockFreq+0x200>)
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f003 030c 	and.w	r3, r3, #12
 80023dc:	2b08      	cmp	r3, #8
 80023de:	d00d      	beq.n	80023fc <HAL_RCC_GetSysClockFreq+0x40>
 80023e0:	2b08      	cmp	r3, #8
 80023e2:	f200 80e1 	bhi.w	80025a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d002      	beq.n	80023f0 <HAL_RCC_GetSysClockFreq+0x34>
 80023ea:	2b04      	cmp	r3, #4
 80023ec:	d003      	beq.n	80023f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80023ee:	e0db      	b.n	80025a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023f0:	4b73      	ldr	r3, [pc, #460]	; (80025c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80023f2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80023f4:	e0db      	b.n	80025ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023f6:	4b73      	ldr	r3, [pc, #460]	; (80025c4 <HAL_RCC_GetSysClockFreq+0x208>)
 80023f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80023fa:	e0d8      	b.n	80025ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023fc:	4b6f      	ldr	r3, [pc, #444]	; (80025bc <HAL_RCC_GetSysClockFreq+0x200>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002404:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002406:	4b6d      	ldr	r3, [pc, #436]	; (80025bc <HAL_RCC_GetSysClockFreq+0x200>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d063      	beq.n	80024da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002412:	4b6a      	ldr	r3, [pc, #424]	; (80025bc <HAL_RCC_GetSysClockFreq+0x200>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	099b      	lsrs	r3, r3, #6
 8002418:	2200      	movs	r2, #0
 800241a:	63bb      	str	r3, [r7, #56]	; 0x38
 800241c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800241e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002420:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002424:	633b      	str	r3, [r7, #48]	; 0x30
 8002426:	2300      	movs	r3, #0
 8002428:	637b      	str	r3, [r7, #52]	; 0x34
 800242a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800242e:	4622      	mov	r2, r4
 8002430:	462b      	mov	r3, r5
 8002432:	f04f 0000 	mov.w	r0, #0
 8002436:	f04f 0100 	mov.w	r1, #0
 800243a:	0159      	lsls	r1, r3, #5
 800243c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002440:	0150      	lsls	r0, r2, #5
 8002442:	4602      	mov	r2, r0
 8002444:	460b      	mov	r3, r1
 8002446:	4621      	mov	r1, r4
 8002448:	1a51      	subs	r1, r2, r1
 800244a:	6139      	str	r1, [r7, #16]
 800244c:	4629      	mov	r1, r5
 800244e:	eb63 0301 	sbc.w	r3, r3, r1
 8002452:	617b      	str	r3, [r7, #20]
 8002454:	f04f 0200 	mov.w	r2, #0
 8002458:	f04f 0300 	mov.w	r3, #0
 800245c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002460:	4659      	mov	r1, fp
 8002462:	018b      	lsls	r3, r1, #6
 8002464:	4651      	mov	r1, sl
 8002466:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800246a:	4651      	mov	r1, sl
 800246c:	018a      	lsls	r2, r1, #6
 800246e:	4651      	mov	r1, sl
 8002470:	ebb2 0801 	subs.w	r8, r2, r1
 8002474:	4659      	mov	r1, fp
 8002476:	eb63 0901 	sbc.w	r9, r3, r1
 800247a:	f04f 0200 	mov.w	r2, #0
 800247e:	f04f 0300 	mov.w	r3, #0
 8002482:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002486:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800248a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800248e:	4690      	mov	r8, r2
 8002490:	4699      	mov	r9, r3
 8002492:	4623      	mov	r3, r4
 8002494:	eb18 0303 	adds.w	r3, r8, r3
 8002498:	60bb      	str	r3, [r7, #8]
 800249a:	462b      	mov	r3, r5
 800249c:	eb49 0303 	adc.w	r3, r9, r3
 80024a0:	60fb      	str	r3, [r7, #12]
 80024a2:	f04f 0200 	mov.w	r2, #0
 80024a6:	f04f 0300 	mov.w	r3, #0
 80024aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80024ae:	4629      	mov	r1, r5
 80024b0:	024b      	lsls	r3, r1, #9
 80024b2:	4621      	mov	r1, r4
 80024b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80024b8:	4621      	mov	r1, r4
 80024ba:	024a      	lsls	r2, r1, #9
 80024bc:	4610      	mov	r0, r2
 80024be:	4619      	mov	r1, r3
 80024c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024c2:	2200      	movs	r2, #0
 80024c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80024c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80024c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80024cc:	f7fd fee0 	bl	8000290 <__aeabi_uldivmod>
 80024d0:	4602      	mov	r2, r0
 80024d2:	460b      	mov	r3, r1
 80024d4:	4613      	mov	r3, r2
 80024d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024d8:	e058      	b.n	800258c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024da:	4b38      	ldr	r3, [pc, #224]	; (80025bc <HAL_RCC_GetSysClockFreq+0x200>)
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	099b      	lsrs	r3, r3, #6
 80024e0:	2200      	movs	r2, #0
 80024e2:	4618      	mov	r0, r3
 80024e4:	4611      	mov	r1, r2
 80024e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80024ea:	623b      	str	r3, [r7, #32]
 80024ec:	2300      	movs	r3, #0
 80024ee:	627b      	str	r3, [r7, #36]	; 0x24
 80024f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80024f4:	4642      	mov	r2, r8
 80024f6:	464b      	mov	r3, r9
 80024f8:	f04f 0000 	mov.w	r0, #0
 80024fc:	f04f 0100 	mov.w	r1, #0
 8002500:	0159      	lsls	r1, r3, #5
 8002502:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002506:	0150      	lsls	r0, r2, #5
 8002508:	4602      	mov	r2, r0
 800250a:	460b      	mov	r3, r1
 800250c:	4641      	mov	r1, r8
 800250e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002512:	4649      	mov	r1, r9
 8002514:	eb63 0b01 	sbc.w	fp, r3, r1
 8002518:	f04f 0200 	mov.w	r2, #0
 800251c:	f04f 0300 	mov.w	r3, #0
 8002520:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002524:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002528:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800252c:	ebb2 040a 	subs.w	r4, r2, sl
 8002530:	eb63 050b 	sbc.w	r5, r3, fp
 8002534:	f04f 0200 	mov.w	r2, #0
 8002538:	f04f 0300 	mov.w	r3, #0
 800253c:	00eb      	lsls	r3, r5, #3
 800253e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002542:	00e2      	lsls	r2, r4, #3
 8002544:	4614      	mov	r4, r2
 8002546:	461d      	mov	r5, r3
 8002548:	4643      	mov	r3, r8
 800254a:	18e3      	adds	r3, r4, r3
 800254c:	603b      	str	r3, [r7, #0]
 800254e:	464b      	mov	r3, r9
 8002550:	eb45 0303 	adc.w	r3, r5, r3
 8002554:	607b      	str	r3, [r7, #4]
 8002556:	f04f 0200 	mov.w	r2, #0
 800255a:	f04f 0300 	mov.w	r3, #0
 800255e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002562:	4629      	mov	r1, r5
 8002564:	028b      	lsls	r3, r1, #10
 8002566:	4621      	mov	r1, r4
 8002568:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800256c:	4621      	mov	r1, r4
 800256e:	028a      	lsls	r2, r1, #10
 8002570:	4610      	mov	r0, r2
 8002572:	4619      	mov	r1, r3
 8002574:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002576:	2200      	movs	r2, #0
 8002578:	61bb      	str	r3, [r7, #24]
 800257a:	61fa      	str	r2, [r7, #28]
 800257c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002580:	f7fd fe86 	bl	8000290 <__aeabi_uldivmod>
 8002584:	4602      	mov	r2, r0
 8002586:	460b      	mov	r3, r1
 8002588:	4613      	mov	r3, r2
 800258a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800258c:	4b0b      	ldr	r3, [pc, #44]	; (80025bc <HAL_RCC_GetSysClockFreq+0x200>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	0c1b      	lsrs	r3, r3, #16
 8002592:	f003 0303 	and.w	r3, r3, #3
 8002596:	3301      	adds	r3, #1
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800259c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800259e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80025a6:	e002      	b.n	80025ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025a8:	4b05      	ldr	r3, [pc, #20]	; (80025c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80025aa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80025ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3750      	adds	r7, #80	; 0x50
 80025b4:	46bd      	mov	sp, r7
 80025b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025ba:	bf00      	nop
 80025bc:	40023800 	.word	0x40023800
 80025c0:	00f42400 	.word	0x00f42400
 80025c4:	007a1200 	.word	0x007a1200

080025c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025cc:	4b03      	ldr	r3, [pc, #12]	; (80025dc <HAL_RCC_GetHCLKFreq+0x14>)
 80025ce:	681b      	ldr	r3, [r3, #0]
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	20000008 	.word	0x20000008

080025e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80025e4:	f7ff fff0 	bl	80025c8 <HAL_RCC_GetHCLKFreq>
 80025e8:	4602      	mov	r2, r0
 80025ea:	4b05      	ldr	r3, [pc, #20]	; (8002600 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	0a9b      	lsrs	r3, r3, #10
 80025f0:	f003 0307 	and.w	r3, r3, #7
 80025f4:	4903      	ldr	r1, [pc, #12]	; (8002604 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025f6:	5ccb      	ldrb	r3, [r1, r3]
 80025f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	40023800 	.word	0x40023800
 8002604:	0800489c 	.word	0x0800489c

08002608 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800260c:	f7ff ffdc 	bl	80025c8 <HAL_RCC_GetHCLKFreq>
 8002610:	4602      	mov	r2, r0
 8002612:	4b05      	ldr	r3, [pc, #20]	; (8002628 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	0b5b      	lsrs	r3, r3, #13
 8002618:	f003 0307 	and.w	r3, r3, #7
 800261c:	4903      	ldr	r1, [pc, #12]	; (800262c <HAL_RCC_GetPCLK2Freq+0x24>)
 800261e:	5ccb      	ldrb	r3, [r1, r3]
 8002620:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002624:	4618      	mov	r0, r3
 8002626:	bd80      	pop	{r7, pc}
 8002628:	40023800 	.word	0x40023800
 800262c:	0800489c 	.word	0x0800489c

08002630 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e03f      	b.n	80026c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b00      	cmp	r3, #0
 800264c:	d106      	bne.n	800265c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f7fe faa4 	bl	8000ba4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2224      	movs	r2, #36	; 0x24
 8002660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	68da      	ldr	r2, [r3, #12]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002672:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f000 ff4d 	bl	8003514 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	691a      	ldr	r2, [r3, #16]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002688:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	695a      	ldr	r2, [r3, #20]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002698:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68da      	ldr	r2, [r3, #12]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2220      	movs	r2, #32
 80026b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2220      	movs	r2, #32
 80026bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
	...

080026cc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b08c      	sub	sp, #48	; 0x30
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	4613      	mov	r3, r2
 80026d8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b20      	cmp	r3, #32
 80026e4:	d165      	bne.n	80027b2 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d002      	beq.n	80026f2 <HAL_UART_Transmit_DMA+0x26>
 80026ec:	88fb      	ldrh	r3, [r7, #6]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e05e      	b.n	80027b4 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d101      	bne.n	8002704 <HAL_UART_Transmit_DMA+0x38>
 8002700:	2302      	movs	r3, #2
 8002702:	e057      	b.n	80027b4 <HAL_UART_Transmit_DMA+0xe8>
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800270c:	68ba      	ldr	r2, [r7, #8]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	88fa      	ldrh	r2, [r7, #6]
 8002716:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	88fa      	ldrh	r2, [r7, #6]
 800271c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2200      	movs	r2, #0
 8002722:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2221      	movs	r2, #33	; 0x21
 8002728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002730:	4a22      	ldr	r2, [pc, #136]	; (80027bc <HAL_UART_Transmit_DMA+0xf0>)
 8002732:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002738:	4a21      	ldr	r2, [pc, #132]	; (80027c0 <HAL_UART_Transmit_DMA+0xf4>)
 800273a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002740:	4a20      	ldr	r2, [pc, #128]	; (80027c4 <HAL_UART_Transmit_DMA+0xf8>)
 8002742:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002748:	2200      	movs	r2, #0
 800274a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800274c:	f107 0308 	add.w	r3, r7, #8
 8002750:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002758:	6819      	ldr	r1, [r3, #0]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	3304      	adds	r3, #4
 8002760:	461a      	mov	r2, r3
 8002762:	88fb      	ldrh	r3, [r7, #6]
 8002764:	f7fe fdc0 	bl	80012e8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002770:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	3314      	adds	r3, #20
 8002780:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	e853 3f00 	ldrex	r3, [r3]
 8002788:	617b      	str	r3, [r7, #20]
   return(result);
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002790:	62bb      	str	r3, [r7, #40]	; 0x28
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	3314      	adds	r3, #20
 8002798:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800279a:	627a      	str	r2, [r7, #36]	; 0x24
 800279c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800279e:	6a39      	ldr	r1, [r7, #32]
 80027a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027a2:	e841 2300 	strex	r3, r2, [r1]
 80027a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d1e5      	bne.n	800277a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80027ae:	2300      	movs	r3, #0
 80027b0:	e000      	b.n	80027b4 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80027b2:	2302      	movs	r3, #2
  }
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3730      	adds	r7, #48	; 0x30
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	08002dad 	.word	0x08002dad
 80027c0:	08002e47 	.word	0x08002e47
 80027c4:	08002fbf 	.word	0x08002fbf

080027c8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	4613      	mov	r3, r2
 80027d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b20      	cmp	r3, #32
 80027e0:	d11d      	bne.n	800281e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d002      	beq.n	80027ee <HAL_UART_Receive_DMA+0x26>
 80027e8:	88fb      	ldrh	r3, [r7, #6]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d101      	bne.n	80027f2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e016      	b.n	8002820 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d101      	bne.n	8002800 <HAL_UART_Receive_DMA+0x38>
 80027fc:	2302      	movs	r3, #2
 80027fe:	e00f      	b.n	8002820 <HAL_UART_Receive_DMA+0x58>
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2200      	movs	r2, #0
 800280c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800280e:	88fb      	ldrh	r3, [r7, #6]
 8002810:	461a      	mov	r2, r3
 8002812:	68b9      	ldr	r1, [r7, #8]
 8002814:	68f8      	ldr	r0, [r7, #12]
 8002816:	f000 fc1d 	bl	8003054 <UART_Start_Receive_DMA>
 800281a:	4603      	mov	r3, r0
 800281c:	e000      	b.n	8002820 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800281e:	2302      	movs	r3, #2
  }
}
 8002820:	4618      	mov	r0, r3
 8002822:	3710      	adds	r7, #16
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b0ba      	sub	sp, #232	; 0xe8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	695b      	ldr	r3, [r3, #20]
 800284a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800284e:	2300      	movs	r3, #0
 8002850:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002854:	2300      	movs	r3, #0
 8002856:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800285a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800285e:	f003 030f 	and.w	r3, r3, #15
 8002862:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002866:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800286a:	2b00      	cmp	r3, #0
 800286c:	d10f      	bne.n	800288e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800286e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002872:	f003 0320 	and.w	r3, r3, #32
 8002876:	2b00      	cmp	r3, #0
 8002878:	d009      	beq.n	800288e <HAL_UART_IRQHandler+0x66>
 800287a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800287e:	f003 0320 	and.w	r3, r3, #32
 8002882:	2b00      	cmp	r3, #0
 8002884:	d003      	beq.n	800288e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f000 fd89 	bl	800339e <UART_Receive_IT>
      return;
 800288c:	e256      	b.n	8002d3c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800288e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002892:	2b00      	cmp	r3, #0
 8002894:	f000 80de 	beq.w	8002a54 <HAL_UART_IRQHandler+0x22c>
 8002898:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800289c:	f003 0301 	and.w	r3, r3, #1
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d106      	bne.n	80028b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80028a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028a8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	f000 80d1 	beq.w	8002a54 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80028b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00b      	beq.n	80028d6 <HAL_UART_IRQHandler+0xae>
 80028be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d005      	beq.n	80028d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ce:	f043 0201 	orr.w	r2, r3, #1
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80028d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028da:	f003 0304 	and.w	r3, r3, #4
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d00b      	beq.n	80028fa <HAL_UART_IRQHandler+0xd2>
 80028e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028e6:	f003 0301 	and.w	r3, r3, #1
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d005      	beq.n	80028fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f2:	f043 0202 	orr.w	r2, r3, #2
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80028fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00b      	beq.n	800291e <HAL_UART_IRQHandler+0xf6>
 8002906:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	2b00      	cmp	r3, #0
 8002910:	d005      	beq.n	800291e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002916:	f043 0204 	orr.w	r2, r3, #4
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800291e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002922:	f003 0308 	and.w	r3, r3, #8
 8002926:	2b00      	cmp	r3, #0
 8002928:	d011      	beq.n	800294e <HAL_UART_IRQHandler+0x126>
 800292a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800292e:	f003 0320 	and.w	r3, r3, #32
 8002932:	2b00      	cmp	r3, #0
 8002934:	d105      	bne.n	8002942 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002936:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	2b00      	cmp	r3, #0
 8002940:	d005      	beq.n	800294e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002946:	f043 0208 	orr.w	r2, r3, #8
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002952:	2b00      	cmp	r3, #0
 8002954:	f000 81ed 	beq.w	8002d32 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002958:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800295c:	f003 0320 	and.w	r3, r3, #32
 8002960:	2b00      	cmp	r3, #0
 8002962:	d008      	beq.n	8002976 <HAL_UART_IRQHandler+0x14e>
 8002964:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002968:	f003 0320 	and.w	r3, r3, #32
 800296c:	2b00      	cmp	r3, #0
 800296e:	d002      	beq.n	8002976 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f000 fd14 	bl	800339e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	695b      	ldr	r3, [r3, #20]
 800297c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002980:	2b40      	cmp	r3, #64	; 0x40
 8002982:	bf0c      	ite	eq
 8002984:	2301      	moveq	r3, #1
 8002986:	2300      	movne	r3, #0
 8002988:	b2db      	uxtb	r3, r3
 800298a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002992:	f003 0308 	and.w	r3, r3, #8
 8002996:	2b00      	cmp	r3, #0
 8002998:	d103      	bne.n	80029a2 <HAL_UART_IRQHandler+0x17a>
 800299a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d04f      	beq.n	8002a42 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f000 fc1c 	bl	80031e0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	695b      	ldr	r3, [r3, #20]
 80029ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029b2:	2b40      	cmp	r3, #64	; 0x40
 80029b4:	d141      	bne.n	8002a3a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	3314      	adds	r3, #20
 80029bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80029c4:	e853 3f00 	ldrex	r3, [r3]
 80029c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80029cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80029d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	3314      	adds	r3, #20
 80029de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80029e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80029e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80029ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80029f2:	e841 2300 	strex	r3, r2, [r1]
 80029f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80029fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1d9      	bne.n	80029b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d013      	beq.n	8002a32 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a0e:	4a7d      	ldr	r2, [pc, #500]	; (8002c04 <HAL_UART_IRQHandler+0x3dc>)
 8002a10:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7fe fd2e 	bl	8001478 <HAL_DMA_Abort_IT>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d016      	beq.n	8002a50 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a2c:	4610      	mov	r0, r2
 8002a2e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a30:	e00e      	b.n	8002a50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 f9a4 	bl	8002d80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a38:	e00a      	b.n	8002a50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 f9a0 	bl	8002d80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a40:	e006      	b.n	8002a50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f000 f99c 	bl	8002d80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002a4e:	e170      	b.n	8002d32 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a50:	bf00      	nop
    return;
 8002a52:	e16e      	b.n	8002d32 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	f040 814a 	bne.w	8002cf2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002a5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a62:	f003 0310 	and.w	r3, r3, #16
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	f000 8143 	beq.w	8002cf2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002a6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a70:	f003 0310 	and.w	r3, r3, #16
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	f000 813c 	beq.w	8002cf2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	60bb      	str	r3, [r7, #8]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	60bb      	str	r3, [r7, #8]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	60bb      	str	r3, [r7, #8]
 8002a8e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	695b      	ldr	r3, [r3, #20]
 8002a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a9a:	2b40      	cmp	r3, #64	; 0x40
 8002a9c:	f040 80b4 	bne.w	8002c08 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002aac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	f000 8140 	beq.w	8002d36 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002aba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	f080 8139 	bcs.w	8002d36 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002aca:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad0:	69db      	ldr	r3, [r3, #28]
 8002ad2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ad6:	f000 8088 	beq.w	8002bea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	330c      	adds	r3, #12
 8002ae0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ae4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ae8:	e853 3f00 	ldrex	r3, [r3]
 8002aec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002af0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002af4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002af8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	330c      	adds	r3, #12
 8002b02:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002b06:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002b0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b0e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002b12:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002b16:	e841 2300 	strex	r3, r2, [r1]
 8002b1a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002b1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1d9      	bne.n	8002ada <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	3314      	adds	r3, #20
 8002b2c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b30:	e853 3f00 	ldrex	r3, [r3]
 8002b34:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002b36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b38:	f023 0301 	bic.w	r3, r3, #1
 8002b3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	3314      	adds	r3, #20
 8002b46:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002b4a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002b4e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b50:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002b52:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002b56:	e841 2300 	strex	r3, r2, [r1]
 8002b5a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002b5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d1e1      	bne.n	8002b26 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	3314      	adds	r3, #20
 8002b68:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b6c:	e853 3f00 	ldrex	r3, [r3]
 8002b70:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002b72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	3314      	adds	r3, #20
 8002b82:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002b86:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002b88:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b8a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002b8c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002b8e:	e841 2300 	strex	r3, r2, [r1]
 8002b92:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002b94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1e3      	bne.n	8002b62 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2220      	movs	r2, #32
 8002b9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	330c      	adds	r3, #12
 8002bae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bb2:	e853 3f00 	ldrex	r3, [r3]
 8002bb6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002bb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bba:	f023 0310 	bic.w	r3, r3, #16
 8002bbe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	330c      	adds	r3, #12
 8002bc8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002bcc:	65ba      	str	r2, [r7, #88]	; 0x58
 8002bce:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bd0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002bd2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002bd4:	e841 2300 	strex	r3, r2, [r1]
 8002bd8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002bda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d1e3      	bne.n	8002ba8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7fe fbd7 	bl	8001398 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 f8ca 	bl	8002d94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002c00:	e099      	b.n	8002d36 <HAL_UART_IRQHandler+0x50e>
 8002c02:	bf00      	nop
 8002c04:	080032a7 	.word	0x080032a7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	f000 808b 	beq.w	8002d3a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002c24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f000 8086 	beq.w	8002d3a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	330c      	adds	r3, #12
 8002c34:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c38:	e853 3f00 	ldrex	r3, [r3]
 8002c3c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002c44:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	330c      	adds	r3, #12
 8002c4e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002c52:	647a      	str	r2, [r7, #68]	; 0x44
 8002c54:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c56:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002c58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c5a:	e841 2300 	strex	r3, r2, [r1]
 8002c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002c60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1e3      	bne.n	8002c2e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	3314      	adds	r3, #20
 8002c6c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c70:	e853 3f00 	ldrex	r3, [r3]
 8002c74:	623b      	str	r3, [r7, #32]
   return(result);
 8002c76:	6a3b      	ldr	r3, [r7, #32]
 8002c78:	f023 0301 	bic.w	r3, r3, #1
 8002c7c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	3314      	adds	r3, #20
 8002c86:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002c8a:	633a      	str	r2, [r7, #48]	; 0x30
 8002c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002c90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c92:	e841 2300 	strex	r3, r2, [r1]
 8002c96:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1e3      	bne.n	8002c66 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2220      	movs	r2, #32
 8002ca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	330c      	adds	r3, #12
 8002cb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	e853 3f00 	ldrex	r3, [r3]
 8002cba:	60fb      	str	r3, [r7, #12]
   return(result);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f023 0310 	bic.w	r3, r3, #16
 8002cc2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	330c      	adds	r3, #12
 8002ccc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002cd0:	61fa      	str	r2, [r7, #28]
 8002cd2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cd4:	69b9      	ldr	r1, [r7, #24]
 8002cd6:	69fa      	ldr	r2, [r7, #28]
 8002cd8:	e841 2300 	strex	r3, r2, [r1]
 8002cdc:	617b      	str	r3, [r7, #20]
   return(result);
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d1e3      	bne.n	8002cac <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ce4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002ce8:	4619      	mov	r1, r3
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 f852 	bl	8002d94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002cf0:	e023      	b.n	8002d3a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002cf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d009      	beq.n	8002d12 <HAL_UART_IRQHandler+0x4ea>
 8002cfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d003      	beq.n	8002d12 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 fadf 	bl	80032ce <UART_Transmit_IT>
    return;
 8002d10:	e014      	b.n	8002d3c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002d12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d00e      	beq.n	8002d3c <HAL_UART_IRQHandler+0x514>
 8002d1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d008      	beq.n	8002d3c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 fb1f 	bl	800336e <UART_EndTransmit_IT>
    return;
 8002d30:	e004      	b.n	8002d3c <HAL_UART_IRQHandler+0x514>
    return;
 8002d32:	bf00      	nop
 8002d34:	e002      	b.n	8002d3c <HAL_UART_IRQHandler+0x514>
      return;
 8002d36:	bf00      	nop
 8002d38:	e000      	b.n	8002d3c <HAL_UART_IRQHandler+0x514>
      return;
 8002d3a:	bf00      	nop
  }
}
 8002d3c:	37e8      	adds	r7, #232	; 0xe8
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop

08002d44 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8002d60:	bf00      	nop
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002da0:	bf00      	nop
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b090      	sub	sp, #64	; 0x40
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db8:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d137      	bne.n	8002e38 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8002dc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dca:	2200      	movs	r2, #0
 8002dcc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002dce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	3314      	adds	r3, #20
 8002dd4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd8:	e853 3f00 	ldrex	r3, [r3]
 8002ddc:	623b      	str	r3, [r7, #32]
   return(result);
 8002dde:	6a3b      	ldr	r3, [r7, #32]
 8002de0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002de4:	63bb      	str	r3, [r7, #56]	; 0x38
 8002de6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	3314      	adds	r3, #20
 8002dec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002dee:	633a      	str	r2, [r7, #48]	; 0x30
 8002df0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002df2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002df4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002df6:	e841 2300 	strex	r3, r2, [r1]
 8002dfa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d1e5      	bne.n	8002dce <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002e02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	330c      	adds	r3, #12
 8002e08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	e853 3f00 	ldrex	r3, [r3]
 8002e10:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e18:	637b      	str	r3, [r7, #52]	; 0x34
 8002e1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	330c      	adds	r3, #12
 8002e20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e22:	61fa      	str	r2, [r7, #28]
 8002e24:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e26:	69b9      	ldr	r1, [r7, #24]
 8002e28:	69fa      	ldr	r2, [r7, #28]
 8002e2a:	e841 2300 	strex	r3, r2, [r1]
 8002e2e:	617b      	str	r3, [r7, #20]
   return(result);
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d1e5      	bne.n	8002e02 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002e36:	e002      	b.n	8002e3e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8002e38:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002e3a:	f7ff ff83 	bl	8002d44 <HAL_UART_TxCpltCallback>
}
 8002e3e:	bf00      	nop
 8002e40:	3740      	adds	r7, #64	; 0x40
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b084      	sub	sp, #16
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e52:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8002e54:	68f8      	ldr	r0, [r7, #12]
 8002e56:	f7ff ff7f 	bl	8002d58 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e5a:	bf00      	nop
 8002e5c:	3710      	adds	r7, #16
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b09c      	sub	sp, #112	; 0x70
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e6e:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d172      	bne.n	8002f64 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8002e7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e80:	2200      	movs	r2, #0
 8002e82:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	330c      	adds	r3, #12
 8002e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e8e:	e853 3f00 	ldrex	r3, [r3]
 8002e92:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002e94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e9a:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	330c      	adds	r3, #12
 8002ea2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002ea4:	65ba      	str	r2, [r7, #88]	; 0x58
 8002ea6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ea8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002eaa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002eac:	e841 2300 	strex	r3, r2, [r1]
 8002eb0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002eb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d1e5      	bne.n	8002e84 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002eb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	3314      	adds	r3, #20
 8002ebe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ec2:	e853 3f00 	ldrex	r3, [r3]
 8002ec6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002ec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eca:	f023 0301 	bic.w	r3, r3, #1
 8002ece:	667b      	str	r3, [r7, #100]	; 0x64
 8002ed0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	3314      	adds	r3, #20
 8002ed6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002ed8:	647a      	str	r2, [r7, #68]	; 0x44
 8002eda:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002edc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002ede:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ee0:	e841 2300 	strex	r3, r2, [r1]
 8002ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002ee6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d1e5      	bne.n	8002eb8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002eec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	3314      	adds	r3, #20
 8002ef2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef6:	e853 3f00 	ldrex	r3, [r3]
 8002efa:	623b      	str	r3, [r7, #32]
   return(result);
 8002efc:	6a3b      	ldr	r3, [r7, #32]
 8002efe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f02:	663b      	str	r3, [r7, #96]	; 0x60
 8002f04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	3314      	adds	r3, #20
 8002f0a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002f0c:	633a      	str	r2, [r7, #48]	; 0x30
 8002f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f10:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f14:	e841 2300 	strex	r3, r2, [r1]
 8002f18:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d1e5      	bne.n	8002eec <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002f20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f22:	2220      	movs	r2, #32
 8002f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d119      	bne.n	8002f64 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	330c      	adds	r3, #12
 8002f36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	e853 3f00 	ldrex	r3, [r3]
 8002f3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f023 0310 	bic.w	r3, r3, #16
 8002f46:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	330c      	adds	r3, #12
 8002f4e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002f50:	61fa      	str	r2, [r7, #28]
 8002f52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f54:	69b9      	ldr	r1, [r7, #24]
 8002f56:	69fa      	ldr	r2, [r7, #28]
 8002f58:	e841 2300 	strex	r3, r2, [r1]
 8002f5c:	617b      	str	r3, [r7, #20]
   return(result);
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d1e5      	bne.n	8002f30 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d106      	bne.n	8002f7a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002f6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f6e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002f70:	4619      	mov	r1, r3
 8002f72:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002f74:	f7ff ff0e 	bl	8002d94 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002f78:	e002      	b.n	8002f80 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8002f7a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002f7c:	f7fd fc6a 	bl	8000854 <HAL_UART_RxCpltCallback>
}
 8002f80:	bf00      	nop
 8002f82:	3770      	adds	r7, #112	; 0x70
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f94:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d108      	bne.n	8002fb0 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002fa2:	085b      	lsrs	r3, r3, #1
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	68f8      	ldr	r0, [r7, #12]
 8002faa:	f7ff fef3 	bl	8002d94 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002fae:	e002      	b.n	8002fb6 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8002fb0:	68f8      	ldr	r0, [r7, #12]
 8002fb2:	f7ff fedb 	bl	8002d6c <HAL_UART_RxHalfCpltCallback>
}
 8002fb6:	bf00      	nop
 8002fb8:	3710      	adds	r7, #16
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b084      	sub	sp, #16
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fce:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fda:	2b80      	cmp	r3, #128	; 0x80
 8002fdc:	bf0c      	ite	eq
 8002fde:	2301      	moveq	r3, #1
 8002fe0:	2300      	movne	r3, #0
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b21      	cmp	r3, #33	; 0x21
 8002ff0:	d108      	bne.n	8003004 <UART_DMAError+0x46>
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d005      	beq.n	8003004 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002ffe:	68b8      	ldr	r0, [r7, #8]
 8003000:	f000 f8c6 	bl	8003190 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800300e:	2b40      	cmp	r3, #64	; 0x40
 8003010:	bf0c      	ite	eq
 8003012:	2301      	moveq	r3, #1
 8003014:	2300      	movne	r3, #0
 8003016:	b2db      	uxtb	r3, r3
 8003018:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2b22      	cmp	r3, #34	; 0x22
 8003024:	d108      	bne.n	8003038 <UART_DMAError+0x7a>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d005      	beq.n	8003038 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	2200      	movs	r2, #0
 8003030:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003032:	68b8      	ldr	r0, [r7, #8]
 8003034:	f000 f8d4 	bl	80031e0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303c:	f043 0210 	orr.w	r2, r3, #16
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003044:	68b8      	ldr	r0, [r7, #8]
 8003046:	f7ff fe9b 	bl	8002d80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800304a:	bf00      	nop
 800304c:	3710      	adds	r7, #16
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
	...

08003054 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b098      	sub	sp, #96	; 0x60
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	4613      	mov	r3, r2
 8003060:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003062:	68ba      	ldr	r2, [r7, #8]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	88fa      	ldrh	r2, [r7, #6]
 800306c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2200      	movs	r2, #0
 8003072:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2222      	movs	r2, #34	; 0x22
 8003078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003080:	4a40      	ldr	r2, [pc, #256]	; (8003184 <UART_Start_Receive_DMA+0x130>)
 8003082:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003088:	4a3f      	ldr	r2, [pc, #252]	; (8003188 <UART_Start_Receive_DMA+0x134>)
 800308a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003090:	4a3e      	ldr	r2, [pc, #248]	; (800318c <UART_Start_Receive_DMA+0x138>)
 8003092:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003098:	2200      	movs	r2, #0
 800309a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800309c:	f107 0308 	add.w	r3, r7, #8
 80030a0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	3304      	adds	r3, #4
 80030ac:	4619      	mov	r1, r3
 80030ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	88fb      	ldrh	r3, [r7, #6]
 80030b4:	f7fe f918 	bl	80012e8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80030b8:	2300      	movs	r3, #0
 80030ba:	613b      	str	r3, [r7, #16]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	613b      	str	r3, [r7, #16]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	613b      	str	r3, [r7, #16]
 80030cc:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d019      	beq.n	8003112 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	330c      	adds	r3, #12
 80030e4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030e8:	e853 3f00 	ldrex	r3, [r3]
 80030ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80030ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	330c      	adds	r3, #12
 80030fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80030fe:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003100:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003102:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003104:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003106:	e841 2300 	strex	r3, r2, [r1]
 800310a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800310c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1e5      	bne.n	80030de <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	3314      	adds	r3, #20
 8003118:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800311a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800311c:	e853 3f00 	ldrex	r3, [r3]
 8003120:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003124:	f043 0301 	orr.w	r3, r3, #1
 8003128:	657b      	str	r3, [r7, #84]	; 0x54
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	3314      	adds	r3, #20
 8003130:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003132:	63ba      	str	r2, [r7, #56]	; 0x38
 8003134:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003136:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003138:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800313a:	e841 2300 	strex	r3, r2, [r1]
 800313e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003142:	2b00      	cmp	r3, #0
 8003144:	d1e5      	bne.n	8003112 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	3314      	adds	r3, #20
 800314c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	e853 3f00 	ldrex	r3, [r3]
 8003154:	617b      	str	r3, [r7, #20]
   return(result);
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800315c:	653b      	str	r3, [r7, #80]	; 0x50
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	3314      	adds	r3, #20
 8003164:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003166:	627a      	str	r2, [r7, #36]	; 0x24
 8003168:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800316a:	6a39      	ldr	r1, [r7, #32]
 800316c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800316e:	e841 2300 	strex	r3, r2, [r1]
 8003172:	61fb      	str	r3, [r7, #28]
   return(result);
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d1e5      	bne.n	8003146 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800317a:	2300      	movs	r3, #0
}
 800317c:	4618      	mov	r0, r3
 800317e:	3760      	adds	r7, #96	; 0x60
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	08002e63 	.word	0x08002e63
 8003188:	08002f89 	.word	0x08002f89
 800318c:	08002fbf 	.word	0x08002fbf

08003190 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003190:	b480      	push	{r7}
 8003192:	b089      	sub	sp, #36	; 0x24
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	330c      	adds	r3, #12
 800319e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	e853 3f00 	ldrex	r3, [r3]
 80031a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80031ae:	61fb      	str	r3, [r7, #28]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	330c      	adds	r3, #12
 80031b6:	69fa      	ldr	r2, [r7, #28]
 80031b8:	61ba      	str	r2, [r7, #24]
 80031ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031bc:	6979      	ldr	r1, [r7, #20]
 80031be:	69ba      	ldr	r2, [r7, #24]
 80031c0:	e841 2300 	strex	r3, r2, [r1]
 80031c4:	613b      	str	r3, [r7, #16]
   return(result);
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d1e5      	bne.n	8003198 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2220      	movs	r2, #32
 80031d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80031d4:	bf00      	nop
 80031d6:	3724      	adds	r7, #36	; 0x24
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b095      	sub	sp, #84	; 0x54
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	330c      	adds	r3, #12
 80031ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031f2:	e853 3f00 	ldrex	r3, [r3]
 80031f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80031f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80031fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	330c      	adds	r3, #12
 8003206:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003208:	643a      	str	r2, [r7, #64]	; 0x40
 800320a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800320c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800320e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003210:	e841 2300 	strex	r3, r2, [r1]
 8003214:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003218:	2b00      	cmp	r3, #0
 800321a:	d1e5      	bne.n	80031e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	3314      	adds	r3, #20
 8003222:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003224:	6a3b      	ldr	r3, [r7, #32]
 8003226:	e853 3f00 	ldrex	r3, [r3]
 800322a:	61fb      	str	r3, [r7, #28]
   return(result);
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	f023 0301 	bic.w	r3, r3, #1
 8003232:	64bb      	str	r3, [r7, #72]	; 0x48
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	3314      	adds	r3, #20
 800323a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800323c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800323e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003240:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003242:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003244:	e841 2300 	strex	r3, r2, [r1]
 8003248:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800324a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324c:	2b00      	cmp	r3, #0
 800324e:	d1e5      	bne.n	800321c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003254:	2b01      	cmp	r3, #1
 8003256:	d119      	bne.n	800328c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	330c      	adds	r3, #12
 800325e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	e853 3f00 	ldrex	r3, [r3]
 8003266:	60bb      	str	r3, [r7, #8]
   return(result);
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	f023 0310 	bic.w	r3, r3, #16
 800326e:	647b      	str	r3, [r7, #68]	; 0x44
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	330c      	adds	r3, #12
 8003276:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003278:	61ba      	str	r2, [r7, #24]
 800327a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800327c:	6979      	ldr	r1, [r7, #20]
 800327e:	69ba      	ldr	r2, [r7, #24]
 8003280:	e841 2300 	strex	r3, r2, [r1]
 8003284:	613b      	str	r3, [r7, #16]
   return(result);
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1e5      	bne.n	8003258 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2220      	movs	r2, #32
 8003290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	631a      	str	r2, [r3, #48]	; 0x30
}
 800329a:	bf00      	nop
 800329c:	3754      	adds	r7, #84	; 0x54
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr

080032a6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b084      	sub	sp, #16
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2200      	movs	r2, #0
 80032be:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80032c0:	68f8      	ldr	r0, [r7, #12]
 80032c2:	f7ff fd5d 	bl	8002d80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80032c6:	bf00      	nop
 80032c8:	3710      	adds	r7, #16
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}

080032ce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80032ce:	b480      	push	{r7}
 80032d0:	b085      	sub	sp, #20
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	2b21      	cmp	r3, #33	; 0x21
 80032e0:	d13e      	bne.n	8003360 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032ea:	d114      	bne.n	8003316 <UART_Transmit_IT+0x48>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	691b      	ldr	r3, [r3, #16]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d110      	bne.n	8003316 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a1b      	ldr	r3, [r3, #32]
 80032f8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	881b      	ldrh	r3, [r3, #0]
 80032fe:	461a      	mov	r2, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003308:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a1b      	ldr	r3, [r3, #32]
 800330e:	1c9a      	adds	r2, r3, #2
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	621a      	str	r2, [r3, #32]
 8003314:	e008      	b.n	8003328 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a1b      	ldr	r3, [r3, #32]
 800331a:	1c59      	adds	r1, r3, #1
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	6211      	str	r1, [r2, #32]
 8003320:	781a      	ldrb	r2, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800332c:	b29b      	uxth	r3, r3
 800332e:	3b01      	subs	r3, #1
 8003330:	b29b      	uxth	r3, r3
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	4619      	mov	r1, r3
 8003336:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003338:	2b00      	cmp	r3, #0
 800333a:	d10f      	bne.n	800335c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68da      	ldr	r2, [r3, #12]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800334a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68da      	ldr	r2, [r3, #12]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800335a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800335c:	2300      	movs	r3, #0
 800335e:	e000      	b.n	8003362 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003360:	2302      	movs	r3, #2
  }
}
 8003362:	4618      	mov	r0, r3
 8003364:	3714      	adds	r7, #20
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr

0800336e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800336e:	b580      	push	{r7, lr}
 8003370:	b082      	sub	sp, #8
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68da      	ldr	r2, [r3, #12]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003384:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2220      	movs	r2, #32
 800338a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f7ff fcd8 	bl	8002d44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800339e:	b580      	push	{r7, lr}
 80033a0:	b08c      	sub	sp, #48	; 0x30
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b22      	cmp	r3, #34	; 0x22
 80033b0:	f040 80ab 	bne.w	800350a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033bc:	d117      	bne.n	80033ee <UART_Receive_IT+0x50>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d113      	bne.n	80033ee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80033c6:	2300      	movs	r3, #0
 80033c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ce:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033dc:	b29a      	uxth	r2, r3
 80033de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e6:	1c9a      	adds	r2, r3, #2
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	629a      	str	r2, [r3, #40]	; 0x28
 80033ec:	e026      	b.n	800343c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80033f4:	2300      	movs	r3, #0
 80033f6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003400:	d007      	beq.n	8003412 <UART_Receive_IT+0x74>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d10a      	bne.n	8003420 <UART_Receive_IT+0x82>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d106      	bne.n	8003420 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	b2da      	uxtb	r2, r3
 800341a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800341c:	701a      	strb	r2, [r3, #0]
 800341e:	e008      	b.n	8003432 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	b2db      	uxtb	r3, r3
 8003428:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800342c:	b2da      	uxtb	r2, r3
 800342e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003430:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003436:	1c5a      	adds	r2, r3, #1
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003440:	b29b      	uxth	r3, r3
 8003442:	3b01      	subs	r3, #1
 8003444:	b29b      	uxth	r3, r3
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	4619      	mov	r1, r3
 800344a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800344c:	2b00      	cmp	r3, #0
 800344e:	d15a      	bne.n	8003506 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68da      	ldr	r2, [r3, #12]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f022 0220 	bic.w	r2, r2, #32
 800345e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	68da      	ldr	r2, [r3, #12]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800346e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	695a      	ldr	r2, [r3, #20]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f022 0201 	bic.w	r2, r2, #1
 800347e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2220      	movs	r2, #32
 8003484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348c:	2b01      	cmp	r3, #1
 800348e:	d135      	bne.n	80034fc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	330c      	adds	r3, #12
 800349c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	e853 3f00 	ldrex	r3, [r3]
 80034a4:	613b      	str	r3, [r7, #16]
   return(result);
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	f023 0310 	bic.w	r3, r3, #16
 80034ac:	627b      	str	r3, [r7, #36]	; 0x24
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	330c      	adds	r3, #12
 80034b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034b6:	623a      	str	r2, [r7, #32]
 80034b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ba:	69f9      	ldr	r1, [r7, #28]
 80034bc:	6a3a      	ldr	r2, [r7, #32]
 80034be:	e841 2300 	strex	r3, r2, [r1]
 80034c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1e5      	bne.n	8003496 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0310 	and.w	r3, r3, #16
 80034d4:	2b10      	cmp	r3, #16
 80034d6:	d10a      	bne.n	80034ee <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80034d8:	2300      	movs	r3, #0
 80034da:	60fb      	str	r3, [r7, #12]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	60fb      	str	r3, [r7, #12]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	60fb      	str	r3, [r7, #12]
 80034ec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80034f2:	4619      	mov	r1, r3
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f7ff fc4d 	bl	8002d94 <HAL_UARTEx_RxEventCallback>
 80034fa:	e002      	b.n	8003502 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f7fd f9a9 	bl	8000854 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003502:	2300      	movs	r3, #0
 8003504:	e002      	b.n	800350c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003506:	2300      	movs	r3, #0
 8003508:	e000      	b.n	800350c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800350a:	2302      	movs	r3, #2
  }
}
 800350c:	4618      	mov	r0, r3
 800350e:	3730      	adds	r7, #48	; 0x30
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003514:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003518:	b0c0      	sub	sp, #256	; 0x100
 800351a:	af00      	add	r7, sp, #0
 800351c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	691b      	ldr	r3, [r3, #16]
 8003528:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800352c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003530:	68d9      	ldr	r1, [r3, #12]
 8003532:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	ea40 0301 	orr.w	r3, r0, r1
 800353c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800353e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003542:	689a      	ldr	r2, [r3, #8]
 8003544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	431a      	orrs	r2, r3
 800354c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003550:	695b      	ldr	r3, [r3, #20]
 8003552:	431a      	orrs	r2, r3
 8003554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003558:	69db      	ldr	r3, [r3, #28]
 800355a:	4313      	orrs	r3, r2
 800355c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800356c:	f021 010c 	bic.w	r1, r1, #12
 8003570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800357a:	430b      	orrs	r3, r1
 800357c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800357e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800358a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800358e:	6999      	ldr	r1, [r3, #24]
 8003590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	ea40 0301 	orr.w	r3, r0, r1
 800359a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800359c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	4b8f      	ldr	r3, [pc, #572]	; (80037e0 <UART_SetConfig+0x2cc>)
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d005      	beq.n	80035b4 <UART_SetConfig+0xa0>
 80035a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	4b8d      	ldr	r3, [pc, #564]	; (80037e4 <UART_SetConfig+0x2d0>)
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d104      	bne.n	80035be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80035b4:	f7ff f828 	bl	8002608 <HAL_RCC_GetPCLK2Freq>
 80035b8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80035bc:	e003      	b.n	80035c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80035be:	f7ff f80f 	bl	80025e0 <HAL_RCC_GetPCLK1Freq>
 80035c2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035ca:	69db      	ldr	r3, [r3, #28]
 80035cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035d0:	f040 810c 	bne.w	80037ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80035d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035d8:	2200      	movs	r2, #0
 80035da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80035de:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80035e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80035e6:	4622      	mov	r2, r4
 80035e8:	462b      	mov	r3, r5
 80035ea:	1891      	adds	r1, r2, r2
 80035ec:	65b9      	str	r1, [r7, #88]	; 0x58
 80035ee:	415b      	adcs	r3, r3
 80035f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80035f6:	4621      	mov	r1, r4
 80035f8:	eb12 0801 	adds.w	r8, r2, r1
 80035fc:	4629      	mov	r1, r5
 80035fe:	eb43 0901 	adc.w	r9, r3, r1
 8003602:	f04f 0200 	mov.w	r2, #0
 8003606:	f04f 0300 	mov.w	r3, #0
 800360a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800360e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003612:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003616:	4690      	mov	r8, r2
 8003618:	4699      	mov	r9, r3
 800361a:	4623      	mov	r3, r4
 800361c:	eb18 0303 	adds.w	r3, r8, r3
 8003620:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003624:	462b      	mov	r3, r5
 8003626:	eb49 0303 	adc.w	r3, r9, r3
 800362a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800362e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800363a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800363e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003642:	460b      	mov	r3, r1
 8003644:	18db      	adds	r3, r3, r3
 8003646:	653b      	str	r3, [r7, #80]	; 0x50
 8003648:	4613      	mov	r3, r2
 800364a:	eb42 0303 	adc.w	r3, r2, r3
 800364e:	657b      	str	r3, [r7, #84]	; 0x54
 8003650:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003654:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003658:	f7fc fe1a 	bl	8000290 <__aeabi_uldivmod>
 800365c:	4602      	mov	r2, r0
 800365e:	460b      	mov	r3, r1
 8003660:	4b61      	ldr	r3, [pc, #388]	; (80037e8 <UART_SetConfig+0x2d4>)
 8003662:	fba3 2302 	umull	r2, r3, r3, r2
 8003666:	095b      	lsrs	r3, r3, #5
 8003668:	011c      	lsls	r4, r3, #4
 800366a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800366e:	2200      	movs	r2, #0
 8003670:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003674:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003678:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800367c:	4642      	mov	r2, r8
 800367e:	464b      	mov	r3, r9
 8003680:	1891      	adds	r1, r2, r2
 8003682:	64b9      	str	r1, [r7, #72]	; 0x48
 8003684:	415b      	adcs	r3, r3
 8003686:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003688:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800368c:	4641      	mov	r1, r8
 800368e:	eb12 0a01 	adds.w	sl, r2, r1
 8003692:	4649      	mov	r1, r9
 8003694:	eb43 0b01 	adc.w	fp, r3, r1
 8003698:	f04f 0200 	mov.w	r2, #0
 800369c:	f04f 0300 	mov.w	r3, #0
 80036a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80036a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80036a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036ac:	4692      	mov	sl, r2
 80036ae:	469b      	mov	fp, r3
 80036b0:	4643      	mov	r3, r8
 80036b2:	eb1a 0303 	adds.w	r3, sl, r3
 80036b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80036ba:	464b      	mov	r3, r9
 80036bc:	eb4b 0303 	adc.w	r3, fp, r3
 80036c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80036c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80036d0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80036d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80036d8:	460b      	mov	r3, r1
 80036da:	18db      	adds	r3, r3, r3
 80036dc:	643b      	str	r3, [r7, #64]	; 0x40
 80036de:	4613      	mov	r3, r2
 80036e0:	eb42 0303 	adc.w	r3, r2, r3
 80036e4:	647b      	str	r3, [r7, #68]	; 0x44
 80036e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80036ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80036ee:	f7fc fdcf 	bl	8000290 <__aeabi_uldivmod>
 80036f2:	4602      	mov	r2, r0
 80036f4:	460b      	mov	r3, r1
 80036f6:	4611      	mov	r1, r2
 80036f8:	4b3b      	ldr	r3, [pc, #236]	; (80037e8 <UART_SetConfig+0x2d4>)
 80036fa:	fba3 2301 	umull	r2, r3, r3, r1
 80036fe:	095b      	lsrs	r3, r3, #5
 8003700:	2264      	movs	r2, #100	; 0x64
 8003702:	fb02 f303 	mul.w	r3, r2, r3
 8003706:	1acb      	subs	r3, r1, r3
 8003708:	00db      	lsls	r3, r3, #3
 800370a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800370e:	4b36      	ldr	r3, [pc, #216]	; (80037e8 <UART_SetConfig+0x2d4>)
 8003710:	fba3 2302 	umull	r2, r3, r3, r2
 8003714:	095b      	lsrs	r3, r3, #5
 8003716:	005b      	lsls	r3, r3, #1
 8003718:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800371c:	441c      	add	r4, r3
 800371e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003722:	2200      	movs	r2, #0
 8003724:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003728:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800372c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003730:	4642      	mov	r2, r8
 8003732:	464b      	mov	r3, r9
 8003734:	1891      	adds	r1, r2, r2
 8003736:	63b9      	str	r1, [r7, #56]	; 0x38
 8003738:	415b      	adcs	r3, r3
 800373a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800373c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003740:	4641      	mov	r1, r8
 8003742:	1851      	adds	r1, r2, r1
 8003744:	6339      	str	r1, [r7, #48]	; 0x30
 8003746:	4649      	mov	r1, r9
 8003748:	414b      	adcs	r3, r1
 800374a:	637b      	str	r3, [r7, #52]	; 0x34
 800374c:	f04f 0200 	mov.w	r2, #0
 8003750:	f04f 0300 	mov.w	r3, #0
 8003754:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003758:	4659      	mov	r1, fp
 800375a:	00cb      	lsls	r3, r1, #3
 800375c:	4651      	mov	r1, sl
 800375e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003762:	4651      	mov	r1, sl
 8003764:	00ca      	lsls	r2, r1, #3
 8003766:	4610      	mov	r0, r2
 8003768:	4619      	mov	r1, r3
 800376a:	4603      	mov	r3, r0
 800376c:	4642      	mov	r2, r8
 800376e:	189b      	adds	r3, r3, r2
 8003770:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003774:	464b      	mov	r3, r9
 8003776:	460a      	mov	r2, r1
 8003778:	eb42 0303 	adc.w	r3, r2, r3
 800377c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800378c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003790:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003794:	460b      	mov	r3, r1
 8003796:	18db      	adds	r3, r3, r3
 8003798:	62bb      	str	r3, [r7, #40]	; 0x28
 800379a:	4613      	mov	r3, r2
 800379c:	eb42 0303 	adc.w	r3, r2, r3
 80037a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80037a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80037aa:	f7fc fd71 	bl	8000290 <__aeabi_uldivmod>
 80037ae:	4602      	mov	r2, r0
 80037b0:	460b      	mov	r3, r1
 80037b2:	4b0d      	ldr	r3, [pc, #52]	; (80037e8 <UART_SetConfig+0x2d4>)
 80037b4:	fba3 1302 	umull	r1, r3, r3, r2
 80037b8:	095b      	lsrs	r3, r3, #5
 80037ba:	2164      	movs	r1, #100	; 0x64
 80037bc:	fb01 f303 	mul.w	r3, r1, r3
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	00db      	lsls	r3, r3, #3
 80037c4:	3332      	adds	r3, #50	; 0x32
 80037c6:	4a08      	ldr	r2, [pc, #32]	; (80037e8 <UART_SetConfig+0x2d4>)
 80037c8:	fba2 2303 	umull	r2, r3, r2, r3
 80037cc:	095b      	lsrs	r3, r3, #5
 80037ce:	f003 0207 	and.w	r2, r3, #7
 80037d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4422      	add	r2, r4
 80037da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80037dc:	e105      	b.n	80039ea <UART_SetConfig+0x4d6>
 80037de:	bf00      	nop
 80037e0:	40011000 	.word	0x40011000
 80037e4:	40011400 	.word	0x40011400
 80037e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037f0:	2200      	movs	r2, #0
 80037f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80037f6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80037fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80037fe:	4642      	mov	r2, r8
 8003800:	464b      	mov	r3, r9
 8003802:	1891      	adds	r1, r2, r2
 8003804:	6239      	str	r1, [r7, #32]
 8003806:	415b      	adcs	r3, r3
 8003808:	627b      	str	r3, [r7, #36]	; 0x24
 800380a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800380e:	4641      	mov	r1, r8
 8003810:	1854      	adds	r4, r2, r1
 8003812:	4649      	mov	r1, r9
 8003814:	eb43 0501 	adc.w	r5, r3, r1
 8003818:	f04f 0200 	mov.w	r2, #0
 800381c:	f04f 0300 	mov.w	r3, #0
 8003820:	00eb      	lsls	r3, r5, #3
 8003822:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003826:	00e2      	lsls	r2, r4, #3
 8003828:	4614      	mov	r4, r2
 800382a:	461d      	mov	r5, r3
 800382c:	4643      	mov	r3, r8
 800382e:	18e3      	adds	r3, r4, r3
 8003830:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003834:	464b      	mov	r3, r9
 8003836:	eb45 0303 	adc.w	r3, r5, r3
 800383a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800383e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800384a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800384e:	f04f 0200 	mov.w	r2, #0
 8003852:	f04f 0300 	mov.w	r3, #0
 8003856:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800385a:	4629      	mov	r1, r5
 800385c:	008b      	lsls	r3, r1, #2
 800385e:	4621      	mov	r1, r4
 8003860:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003864:	4621      	mov	r1, r4
 8003866:	008a      	lsls	r2, r1, #2
 8003868:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800386c:	f7fc fd10 	bl	8000290 <__aeabi_uldivmod>
 8003870:	4602      	mov	r2, r0
 8003872:	460b      	mov	r3, r1
 8003874:	4b60      	ldr	r3, [pc, #384]	; (80039f8 <UART_SetConfig+0x4e4>)
 8003876:	fba3 2302 	umull	r2, r3, r3, r2
 800387a:	095b      	lsrs	r3, r3, #5
 800387c:	011c      	lsls	r4, r3, #4
 800387e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003882:	2200      	movs	r2, #0
 8003884:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003888:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800388c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003890:	4642      	mov	r2, r8
 8003892:	464b      	mov	r3, r9
 8003894:	1891      	adds	r1, r2, r2
 8003896:	61b9      	str	r1, [r7, #24]
 8003898:	415b      	adcs	r3, r3
 800389a:	61fb      	str	r3, [r7, #28]
 800389c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038a0:	4641      	mov	r1, r8
 80038a2:	1851      	adds	r1, r2, r1
 80038a4:	6139      	str	r1, [r7, #16]
 80038a6:	4649      	mov	r1, r9
 80038a8:	414b      	adcs	r3, r1
 80038aa:	617b      	str	r3, [r7, #20]
 80038ac:	f04f 0200 	mov.w	r2, #0
 80038b0:	f04f 0300 	mov.w	r3, #0
 80038b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80038b8:	4659      	mov	r1, fp
 80038ba:	00cb      	lsls	r3, r1, #3
 80038bc:	4651      	mov	r1, sl
 80038be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038c2:	4651      	mov	r1, sl
 80038c4:	00ca      	lsls	r2, r1, #3
 80038c6:	4610      	mov	r0, r2
 80038c8:	4619      	mov	r1, r3
 80038ca:	4603      	mov	r3, r0
 80038cc:	4642      	mov	r2, r8
 80038ce:	189b      	adds	r3, r3, r2
 80038d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80038d4:	464b      	mov	r3, r9
 80038d6:	460a      	mov	r2, r1
 80038d8:	eb42 0303 	adc.w	r3, r2, r3
 80038dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80038e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80038ea:	67fa      	str	r2, [r7, #124]	; 0x7c
 80038ec:	f04f 0200 	mov.w	r2, #0
 80038f0:	f04f 0300 	mov.w	r3, #0
 80038f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80038f8:	4649      	mov	r1, r9
 80038fa:	008b      	lsls	r3, r1, #2
 80038fc:	4641      	mov	r1, r8
 80038fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003902:	4641      	mov	r1, r8
 8003904:	008a      	lsls	r2, r1, #2
 8003906:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800390a:	f7fc fcc1 	bl	8000290 <__aeabi_uldivmod>
 800390e:	4602      	mov	r2, r0
 8003910:	460b      	mov	r3, r1
 8003912:	4b39      	ldr	r3, [pc, #228]	; (80039f8 <UART_SetConfig+0x4e4>)
 8003914:	fba3 1302 	umull	r1, r3, r3, r2
 8003918:	095b      	lsrs	r3, r3, #5
 800391a:	2164      	movs	r1, #100	; 0x64
 800391c:	fb01 f303 	mul.w	r3, r1, r3
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	011b      	lsls	r3, r3, #4
 8003924:	3332      	adds	r3, #50	; 0x32
 8003926:	4a34      	ldr	r2, [pc, #208]	; (80039f8 <UART_SetConfig+0x4e4>)
 8003928:	fba2 2303 	umull	r2, r3, r2, r3
 800392c:	095b      	lsrs	r3, r3, #5
 800392e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003932:	441c      	add	r4, r3
 8003934:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003938:	2200      	movs	r2, #0
 800393a:	673b      	str	r3, [r7, #112]	; 0x70
 800393c:	677a      	str	r2, [r7, #116]	; 0x74
 800393e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003942:	4642      	mov	r2, r8
 8003944:	464b      	mov	r3, r9
 8003946:	1891      	adds	r1, r2, r2
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	415b      	adcs	r3, r3
 800394c:	60fb      	str	r3, [r7, #12]
 800394e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003952:	4641      	mov	r1, r8
 8003954:	1851      	adds	r1, r2, r1
 8003956:	6039      	str	r1, [r7, #0]
 8003958:	4649      	mov	r1, r9
 800395a:	414b      	adcs	r3, r1
 800395c:	607b      	str	r3, [r7, #4]
 800395e:	f04f 0200 	mov.w	r2, #0
 8003962:	f04f 0300 	mov.w	r3, #0
 8003966:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800396a:	4659      	mov	r1, fp
 800396c:	00cb      	lsls	r3, r1, #3
 800396e:	4651      	mov	r1, sl
 8003970:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003974:	4651      	mov	r1, sl
 8003976:	00ca      	lsls	r2, r1, #3
 8003978:	4610      	mov	r0, r2
 800397a:	4619      	mov	r1, r3
 800397c:	4603      	mov	r3, r0
 800397e:	4642      	mov	r2, r8
 8003980:	189b      	adds	r3, r3, r2
 8003982:	66bb      	str	r3, [r7, #104]	; 0x68
 8003984:	464b      	mov	r3, r9
 8003986:	460a      	mov	r2, r1
 8003988:	eb42 0303 	adc.w	r3, r2, r3
 800398c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800398e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	663b      	str	r3, [r7, #96]	; 0x60
 8003998:	667a      	str	r2, [r7, #100]	; 0x64
 800399a:	f04f 0200 	mov.w	r2, #0
 800399e:	f04f 0300 	mov.w	r3, #0
 80039a2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80039a6:	4649      	mov	r1, r9
 80039a8:	008b      	lsls	r3, r1, #2
 80039aa:	4641      	mov	r1, r8
 80039ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039b0:	4641      	mov	r1, r8
 80039b2:	008a      	lsls	r2, r1, #2
 80039b4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80039b8:	f7fc fc6a 	bl	8000290 <__aeabi_uldivmod>
 80039bc:	4602      	mov	r2, r0
 80039be:	460b      	mov	r3, r1
 80039c0:	4b0d      	ldr	r3, [pc, #52]	; (80039f8 <UART_SetConfig+0x4e4>)
 80039c2:	fba3 1302 	umull	r1, r3, r3, r2
 80039c6:	095b      	lsrs	r3, r3, #5
 80039c8:	2164      	movs	r1, #100	; 0x64
 80039ca:	fb01 f303 	mul.w	r3, r1, r3
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	011b      	lsls	r3, r3, #4
 80039d2:	3332      	adds	r3, #50	; 0x32
 80039d4:	4a08      	ldr	r2, [pc, #32]	; (80039f8 <UART_SetConfig+0x4e4>)
 80039d6:	fba2 2303 	umull	r2, r3, r2, r3
 80039da:	095b      	lsrs	r3, r3, #5
 80039dc:	f003 020f 	and.w	r2, r3, #15
 80039e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4422      	add	r2, r4
 80039e8:	609a      	str	r2, [r3, #8]
}
 80039ea:	bf00      	nop
 80039ec:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80039f0:	46bd      	mov	sp, r7
 80039f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039f6:	bf00      	nop
 80039f8:	51eb851f 	.word	0x51eb851f

080039fc <__errno>:
 80039fc:	4b01      	ldr	r3, [pc, #4]	; (8003a04 <__errno+0x8>)
 80039fe:	6818      	ldr	r0, [r3, #0]
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	20000014 	.word	0x20000014

08003a08 <__libc_init_array>:
 8003a08:	b570      	push	{r4, r5, r6, lr}
 8003a0a:	4d0d      	ldr	r5, [pc, #52]	; (8003a40 <__libc_init_array+0x38>)
 8003a0c:	4c0d      	ldr	r4, [pc, #52]	; (8003a44 <__libc_init_array+0x3c>)
 8003a0e:	1b64      	subs	r4, r4, r5
 8003a10:	10a4      	asrs	r4, r4, #2
 8003a12:	2600      	movs	r6, #0
 8003a14:	42a6      	cmp	r6, r4
 8003a16:	d109      	bne.n	8003a2c <__libc_init_array+0x24>
 8003a18:	4d0b      	ldr	r5, [pc, #44]	; (8003a48 <__libc_init_array+0x40>)
 8003a1a:	4c0c      	ldr	r4, [pc, #48]	; (8003a4c <__libc_init_array+0x44>)
 8003a1c:	f000 fc8e 	bl	800433c <_init>
 8003a20:	1b64      	subs	r4, r4, r5
 8003a22:	10a4      	asrs	r4, r4, #2
 8003a24:	2600      	movs	r6, #0
 8003a26:	42a6      	cmp	r6, r4
 8003a28:	d105      	bne.n	8003a36 <__libc_init_array+0x2e>
 8003a2a:	bd70      	pop	{r4, r5, r6, pc}
 8003a2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a30:	4798      	blx	r3
 8003a32:	3601      	adds	r6, #1
 8003a34:	e7ee      	b.n	8003a14 <__libc_init_array+0xc>
 8003a36:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a3a:	4798      	blx	r3
 8003a3c:	3601      	adds	r6, #1
 8003a3e:	e7f2      	b.n	8003a26 <__libc_init_array+0x1e>
 8003a40:	080048e8 	.word	0x080048e8
 8003a44:	080048e8 	.word	0x080048e8
 8003a48:	080048e8 	.word	0x080048e8
 8003a4c:	080048ec 	.word	0x080048ec

08003a50 <memset>:
 8003a50:	4402      	add	r2, r0
 8003a52:	4603      	mov	r3, r0
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d100      	bne.n	8003a5a <memset+0xa>
 8003a58:	4770      	bx	lr
 8003a5a:	f803 1b01 	strb.w	r1, [r3], #1
 8003a5e:	e7f9      	b.n	8003a54 <memset+0x4>

08003a60 <siprintf>:
 8003a60:	b40e      	push	{r1, r2, r3}
 8003a62:	b500      	push	{lr}
 8003a64:	b09c      	sub	sp, #112	; 0x70
 8003a66:	ab1d      	add	r3, sp, #116	; 0x74
 8003a68:	9002      	str	r0, [sp, #8]
 8003a6a:	9006      	str	r0, [sp, #24]
 8003a6c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003a70:	4809      	ldr	r0, [pc, #36]	; (8003a98 <siprintf+0x38>)
 8003a72:	9107      	str	r1, [sp, #28]
 8003a74:	9104      	str	r1, [sp, #16]
 8003a76:	4909      	ldr	r1, [pc, #36]	; (8003a9c <siprintf+0x3c>)
 8003a78:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a7c:	9105      	str	r1, [sp, #20]
 8003a7e:	6800      	ldr	r0, [r0, #0]
 8003a80:	9301      	str	r3, [sp, #4]
 8003a82:	a902      	add	r1, sp, #8
 8003a84:	f000 f868 	bl	8003b58 <_svfiprintf_r>
 8003a88:	9b02      	ldr	r3, [sp, #8]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	701a      	strb	r2, [r3, #0]
 8003a8e:	b01c      	add	sp, #112	; 0x70
 8003a90:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a94:	b003      	add	sp, #12
 8003a96:	4770      	bx	lr
 8003a98:	20000014 	.word	0x20000014
 8003a9c:	ffff0208 	.word	0xffff0208

08003aa0 <__ssputs_r>:
 8003aa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003aa4:	688e      	ldr	r6, [r1, #8]
 8003aa6:	429e      	cmp	r6, r3
 8003aa8:	4682      	mov	sl, r0
 8003aaa:	460c      	mov	r4, r1
 8003aac:	4690      	mov	r8, r2
 8003aae:	461f      	mov	r7, r3
 8003ab0:	d838      	bhi.n	8003b24 <__ssputs_r+0x84>
 8003ab2:	898a      	ldrh	r2, [r1, #12]
 8003ab4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003ab8:	d032      	beq.n	8003b20 <__ssputs_r+0x80>
 8003aba:	6825      	ldr	r5, [r4, #0]
 8003abc:	6909      	ldr	r1, [r1, #16]
 8003abe:	eba5 0901 	sub.w	r9, r5, r1
 8003ac2:	6965      	ldr	r5, [r4, #20]
 8003ac4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003ac8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003acc:	3301      	adds	r3, #1
 8003ace:	444b      	add	r3, r9
 8003ad0:	106d      	asrs	r5, r5, #1
 8003ad2:	429d      	cmp	r5, r3
 8003ad4:	bf38      	it	cc
 8003ad6:	461d      	movcc	r5, r3
 8003ad8:	0553      	lsls	r3, r2, #21
 8003ada:	d531      	bpl.n	8003b40 <__ssputs_r+0xa0>
 8003adc:	4629      	mov	r1, r5
 8003ade:	f000 fb63 	bl	80041a8 <_malloc_r>
 8003ae2:	4606      	mov	r6, r0
 8003ae4:	b950      	cbnz	r0, 8003afc <__ssputs_r+0x5c>
 8003ae6:	230c      	movs	r3, #12
 8003ae8:	f8ca 3000 	str.w	r3, [sl]
 8003aec:	89a3      	ldrh	r3, [r4, #12]
 8003aee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003af2:	81a3      	strh	r3, [r4, #12]
 8003af4:	f04f 30ff 	mov.w	r0, #4294967295
 8003af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003afc:	6921      	ldr	r1, [r4, #16]
 8003afe:	464a      	mov	r2, r9
 8003b00:	f000 fabe 	bl	8004080 <memcpy>
 8003b04:	89a3      	ldrh	r3, [r4, #12]
 8003b06:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003b0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b0e:	81a3      	strh	r3, [r4, #12]
 8003b10:	6126      	str	r6, [r4, #16]
 8003b12:	6165      	str	r5, [r4, #20]
 8003b14:	444e      	add	r6, r9
 8003b16:	eba5 0509 	sub.w	r5, r5, r9
 8003b1a:	6026      	str	r6, [r4, #0]
 8003b1c:	60a5      	str	r5, [r4, #8]
 8003b1e:	463e      	mov	r6, r7
 8003b20:	42be      	cmp	r6, r7
 8003b22:	d900      	bls.n	8003b26 <__ssputs_r+0x86>
 8003b24:	463e      	mov	r6, r7
 8003b26:	6820      	ldr	r0, [r4, #0]
 8003b28:	4632      	mov	r2, r6
 8003b2a:	4641      	mov	r1, r8
 8003b2c:	f000 fab6 	bl	800409c <memmove>
 8003b30:	68a3      	ldr	r3, [r4, #8]
 8003b32:	1b9b      	subs	r3, r3, r6
 8003b34:	60a3      	str	r3, [r4, #8]
 8003b36:	6823      	ldr	r3, [r4, #0]
 8003b38:	4433      	add	r3, r6
 8003b3a:	6023      	str	r3, [r4, #0]
 8003b3c:	2000      	movs	r0, #0
 8003b3e:	e7db      	b.n	8003af8 <__ssputs_r+0x58>
 8003b40:	462a      	mov	r2, r5
 8003b42:	f000 fba5 	bl	8004290 <_realloc_r>
 8003b46:	4606      	mov	r6, r0
 8003b48:	2800      	cmp	r0, #0
 8003b4a:	d1e1      	bne.n	8003b10 <__ssputs_r+0x70>
 8003b4c:	6921      	ldr	r1, [r4, #16]
 8003b4e:	4650      	mov	r0, sl
 8003b50:	f000 fabe 	bl	80040d0 <_free_r>
 8003b54:	e7c7      	b.n	8003ae6 <__ssputs_r+0x46>
	...

08003b58 <_svfiprintf_r>:
 8003b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b5c:	4698      	mov	r8, r3
 8003b5e:	898b      	ldrh	r3, [r1, #12]
 8003b60:	061b      	lsls	r3, r3, #24
 8003b62:	b09d      	sub	sp, #116	; 0x74
 8003b64:	4607      	mov	r7, r0
 8003b66:	460d      	mov	r5, r1
 8003b68:	4614      	mov	r4, r2
 8003b6a:	d50e      	bpl.n	8003b8a <_svfiprintf_r+0x32>
 8003b6c:	690b      	ldr	r3, [r1, #16]
 8003b6e:	b963      	cbnz	r3, 8003b8a <_svfiprintf_r+0x32>
 8003b70:	2140      	movs	r1, #64	; 0x40
 8003b72:	f000 fb19 	bl	80041a8 <_malloc_r>
 8003b76:	6028      	str	r0, [r5, #0]
 8003b78:	6128      	str	r0, [r5, #16]
 8003b7a:	b920      	cbnz	r0, 8003b86 <_svfiprintf_r+0x2e>
 8003b7c:	230c      	movs	r3, #12
 8003b7e:	603b      	str	r3, [r7, #0]
 8003b80:	f04f 30ff 	mov.w	r0, #4294967295
 8003b84:	e0d1      	b.n	8003d2a <_svfiprintf_r+0x1d2>
 8003b86:	2340      	movs	r3, #64	; 0x40
 8003b88:	616b      	str	r3, [r5, #20]
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	9309      	str	r3, [sp, #36]	; 0x24
 8003b8e:	2320      	movs	r3, #32
 8003b90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003b94:	f8cd 800c 	str.w	r8, [sp, #12]
 8003b98:	2330      	movs	r3, #48	; 0x30
 8003b9a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003d44 <_svfiprintf_r+0x1ec>
 8003b9e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003ba2:	f04f 0901 	mov.w	r9, #1
 8003ba6:	4623      	mov	r3, r4
 8003ba8:	469a      	mov	sl, r3
 8003baa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003bae:	b10a      	cbz	r2, 8003bb4 <_svfiprintf_r+0x5c>
 8003bb0:	2a25      	cmp	r2, #37	; 0x25
 8003bb2:	d1f9      	bne.n	8003ba8 <_svfiprintf_r+0x50>
 8003bb4:	ebba 0b04 	subs.w	fp, sl, r4
 8003bb8:	d00b      	beq.n	8003bd2 <_svfiprintf_r+0x7a>
 8003bba:	465b      	mov	r3, fp
 8003bbc:	4622      	mov	r2, r4
 8003bbe:	4629      	mov	r1, r5
 8003bc0:	4638      	mov	r0, r7
 8003bc2:	f7ff ff6d 	bl	8003aa0 <__ssputs_r>
 8003bc6:	3001      	adds	r0, #1
 8003bc8:	f000 80aa 	beq.w	8003d20 <_svfiprintf_r+0x1c8>
 8003bcc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003bce:	445a      	add	r2, fp
 8003bd0:	9209      	str	r2, [sp, #36]	; 0x24
 8003bd2:	f89a 3000 	ldrb.w	r3, [sl]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	f000 80a2 	beq.w	8003d20 <_svfiprintf_r+0x1c8>
 8003bdc:	2300      	movs	r3, #0
 8003bde:	f04f 32ff 	mov.w	r2, #4294967295
 8003be2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003be6:	f10a 0a01 	add.w	sl, sl, #1
 8003bea:	9304      	str	r3, [sp, #16]
 8003bec:	9307      	str	r3, [sp, #28]
 8003bee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003bf2:	931a      	str	r3, [sp, #104]	; 0x68
 8003bf4:	4654      	mov	r4, sl
 8003bf6:	2205      	movs	r2, #5
 8003bf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bfc:	4851      	ldr	r0, [pc, #324]	; (8003d44 <_svfiprintf_r+0x1ec>)
 8003bfe:	f7fc faf7 	bl	80001f0 <memchr>
 8003c02:	9a04      	ldr	r2, [sp, #16]
 8003c04:	b9d8      	cbnz	r0, 8003c3e <_svfiprintf_r+0xe6>
 8003c06:	06d0      	lsls	r0, r2, #27
 8003c08:	bf44      	itt	mi
 8003c0a:	2320      	movmi	r3, #32
 8003c0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c10:	0711      	lsls	r1, r2, #28
 8003c12:	bf44      	itt	mi
 8003c14:	232b      	movmi	r3, #43	; 0x2b
 8003c16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c1a:	f89a 3000 	ldrb.w	r3, [sl]
 8003c1e:	2b2a      	cmp	r3, #42	; 0x2a
 8003c20:	d015      	beq.n	8003c4e <_svfiprintf_r+0xf6>
 8003c22:	9a07      	ldr	r2, [sp, #28]
 8003c24:	4654      	mov	r4, sl
 8003c26:	2000      	movs	r0, #0
 8003c28:	f04f 0c0a 	mov.w	ip, #10
 8003c2c:	4621      	mov	r1, r4
 8003c2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c32:	3b30      	subs	r3, #48	; 0x30
 8003c34:	2b09      	cmp	r3, #9
 8003c36:	d94e      	bls.n	8003cd6 <_svfiprintf_r+0x17e>
 8003c38:	b1b0      	cbz	r0, 8003c68 <_svfiprintf_r+0x110>
 8003c3a:	9207      	str	r2, [sp, #28]
 8003c3c:	e014      	b.n	8003c68 <_svfiprintf_r+0x110>
 8003c3e:	eba0 0308 	sub.w	r3, r0, r8
 8003c42:	fa09 f303 	lsl.w	r3, r9, r3
 8003c46:	4313      	orrs	r3, r2
 8003c48:	9304      	str	r3, [sp, #16]
 8003c4a:	46a2      	mov	sl, r4
 8003c4c:	e7d2      	b.n	8003bf4 <_svfiprintf_r+0x9c>
 8003c4e:	9b03      	ldr	r3, [sp, #12]
 8003c50:	1d19      	adds	r1, r3, #4
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	9103      	str	r1, [sp, #12]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	bfbb      	ittet	lt
 8003c5a:	425b      	neglt	r3, r3
 8003c5c:	f042 0202 	orrlt.w	r2, r2, #2
 8003c60:	9307      	strge	r3, [sp, #28]
 8003c62:	9307      	strlt	r3, [sp, #28]
 8003c64:	bfb8      	it	lt
 8003c66:	9204      	strlt	r2, [sp, #16]
 8003c68:	7823      	ldrb	r3, [r4, #0]
 8003c6a:	2b2e      	cmp	r3, #46	; 0x2e
 8003c6c:	d10c      	bne.n	8003c88 <_svfiprintf_r+0x130>
 8003c6e:	7863      	ldrb	r3, [r4, #1]
 8003c70:	2b2a      	cmp	r3, #42	; 0x2a
 8003c72:	d135      	bne.n	8003ce0 <_svfiprintf_r+0x188>
 8003c74:	9b03      	ldr	r3, [sp, #12]
 8003c76:	1d1a      	adds	r2, r3, #4
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	9203      	str	r2, [sp, #12]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	bfb8      	it	lt
 8003c80:	f04f 33ff 	movlt.w	r3, #4294967295
 8003c84:	3402      	adds	r4, #2
 8003c86:	9305      	str	r3, [sp, #20]
 8003c88:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003d54 <_svfiprintf_r+0x1fc>
 8003c8c:	7821      	ldrb	r1, [r4, #0]
 8003c8e:	2203      	movs	r2, #3
 8003c90:	4650      	mov	r0, sl
 8003c92:	f7fc faad 	bl	80001f0 <memchr>
 8003c96:	b140      	cbz	r0, 8003caa <_svfiprintf_r+0x152>
 8003c98:	2340      	movs	r3, #64	; 0x40
 8003c9a:	eba0 000a 	sub.w	r0, r0, sl
 8003c9e:	fa03 f000 	lsl.w	r0, r3, r0
 8003ca2:	9b04      	ldr	r3, [sp, #16]
 8003ca4:	4303      	orrs	r3, r0
 8003ca6:	3401      	adds	r4, #1
 8003ca8:	9304      	str	r3, [sp, #16]
 8003caa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cae:	4826      	ldr	r0, [pc, #152]	; (8003d48 <_svfiprintf_r+0x1f0>)
 8003cb0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003cb4:	2206      	movs	r2, #6
 8003cb6:	f7fc fa9b 	bl	80001f0 <memchr>
 8003cba:	2800      	cmp	r0, #0
 8003cbc:	d038      	beq.n	8003d30 <_svfiprintf_r+0x1d8>
 8003cbe:	4b23      	ldr	r3, [pc, #140]	; (8003d4c <_svfiprintf_r+0x1f4>)
 8003cc0:	bb1b      	cbnz	r3, 8003d0a <_svfiprintf_r+0x1b2>
 8003cc2:	9b03      	ldr	r3, [sp, #12]
 8003cc4:	3307      	adds	r3, #7
 8003cc6:	f023 0307 	bic.w	r3, r3, #7
 8003cca:	3308      	adds	r3, #8
 8003ccc:	9303      	str	r3, [sp, #12]
 8003cce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003cd0:	4433      	add	r3, r6
 8003cd2:	9309      	str	r3, [sp, #36]	; 0x24
 8003cd4:	e767      	b.n	8003ba6 <_svfiprintf_r+0x4e>
 8003cd6:	fb0c 3202 	mla	r2, ip, r2, r3
 8003cda:	460c      	mov	r4, r1
 8003cdc:	2001      	movs	r0, #1
 8003cde:	e7a5      	b.n	8003c2c <_svfiprintf_r+0xd4>
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	3401      	adds	r4, #1
 8003ce4:	9305      	str	r3, [sp, #20]
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	f04f 0c0a 	mov.w	ip, #10
 8003cec:	4620      	mov	r0, r4
 8003cee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003cf2:	3a30      	subs	r2, #48	; 0x30
 8003cf4:	2a09      	cmp	r2, #9
 8003cf6:	d903      	bls.n	8003d00 <_svfiprintf_r+0x1a8>
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d0c5      	beq.n	8003c88 <_svfiprintf_r+0x130>
 8003cfc:	9105      	str	r1, [sp, #20]
 8003cfe:	e7c3      	b.n	8003c88 <_svfiprintf_r+0x130>
 8003d00:	fb0c 2101 	mla	r1, ip, r1, r2
 8003d04:	4604      	mov	r4, r0
 8003d06:	2301      	movs	r3, #1
 8003d08:	e7f0      	b.n	8003cec <_svfiprintf_r+0x194>
 8003d0a:	ab03      	add	r3, sp, #12
 8003d0c:	9300      	str	r3, [sp, #0]
 8003d0e:	462a      	mov	r2, r5
 8003d10:	4b0f      	ldr	r3, [pc, #60]	; (8003d50 <_svfiprintf_r+0x1f8>)
 8003d12:	a904      	add	r1, sp, #16
 8003d14:	4638      	mov	r0, r7
 8003d16:	f3af 8000 	nop.w
 8003d1a:	1c42      	adds	r2, r0, #1
 8003d1c:	4606      	mov	r6, r0
 8003d1e:	d1d6      	bne.n	8003cce <_svfiprintf_r+0x176>
 8003d20:	89ab      	ldrh	r3, [r5, #12]
 8003d22:	065b      	lsls	r3, r3, #25
 8003d24:	f53f af2c 	bmi.w	8003b80 <_svfiprintf_r+0x28>
 8003d28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003d2a:	b01d      	add	sp, #116	; 0x74
 8003d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d30:	ab03      	add	r3, sp, #12
 8003d32:	9300      	str	r3, [sp, #0]
 8003d34:	462a      	mov	r2, r5
 8003d36:	4b06      	ldr	r3, [pc, #24]	; (8003d50 <_svfiprintf_r+0x1f8>)
 8003d38:	a904      	add	r1, sp, #16
 8003d3a:	4638      	mov	r0, r7
 8003d3c:	f000 f87a 	bl	8003e34 <_printf_i>
 8003d40:	e7eb      	b.n	8003d1a <_svfiprintf_r+0x1c2>
 8003d42:	bf00      	nop
 8003d44:	080048ac 	.word	0x080048ac
 8003d48:	080048b6 	.word	0x080048b6
 8003d4c:	00000000 	.word	0x00000000
 8003d50:	08003aa1 	.word	0x08003aa1
 8003d54:	080048b2 	.word	0x080048b2

08003d58 <_printf_common>:
 8003d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d5c:	4616      	mov	r6, r2
 8003d5e:	4699      	mov	r9, r3
 8003d60:	688a      	ldr	r2, [r1, #8]
 8003d62:	690b      	ldr	r3, [r1, #16]
 8003d64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	bfb8      	it	lt
 8003d6c:	4613      	movlt	r3, r2
 8003d6e:	6033      	str	r3, [r6, #0]
 8003d70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003d74:	4607      	mov	r7, r0
 8003d76:	460c      	mov	r4, r1
 8003d78:	b10a      	cbz	r2, 8003d7e <_printf_common+0x26>
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	6033      	str	r3, [r6, #0]
 8003d7e:	6823      	ldr	r3, [r4, #0]
 8003d80:	0699      	lsls	r1, r3, #26
 8003d82:	bf42      	ittt	mi
 8003d84:	6833      	ldrmi	r3, [r6, #0]
 8003d86:	3302      	addmi	r3, #2
 8003d88:	6033      	strmi	r3, [r6, #0]
 8003d8a:	6825      	ldr	r5, [r4, #0]
 8003d8c:	f015 0506 	ands.w	r5, r5, #6
 8003d90:	d106      	bne.n	8003da0 <_printf_common+0x48>
 8003d92:	f104 0a19 	add.w	sl, r4, #25
 8003d96:	68e3      	ldr	r3, [r4, #12]
 8003d98:	6832      	ldr	r2, [r6, #0]
 8003d9a:	1a9b      	subs	r3, r3, r2
 8003d9c:	42ab      	cmp	r3, r5
 8003d9e:	dc26      	bgt.n	8003dee <_printf_common+0x96>
 8003da0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003da4:	1e13      	subs	r3, r2, #0
 8003da6:	6822      	ldr	r2, [r4, #0]
 8003da8:	bf18      	it	ne
 8003daa:	2301      	movne	r3, #1
 8003dac:	0692      	lsls	r2, r2, #26
 8003dae:	d42b      	bmi.n	8003e08 <_printf_common+0xb0>
 8003db0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003db4:	4649      	mov	r1, r9
 8003db6:	4638      	mov	r0, r7
 8003db8:	47c0      	blx	r8
 8003dba:	3001      	adds	r0, #1
 8003dbc:	d01e      	beq.n	8003dfc <_printf_common+0xa4>
 8003dbe:	6823      	ldr	r3, [r4, #0]
 8003dc0:	68e5      	ldr	r5, [r4, #12]
 8003dc2:	6832      	ldr	r2, [r6, #0]
 8003dc4:	f003 0306 	and.w	r3, r3, #6
 8003dc8:	2b04      	cmp	r3, #4
 8003dca:	bf08      	it	eq
 8003dcc:	1aad      	subeq	r5, r5, r2
 8003dce:	68a3      	ldr	r3, [r4, #8]
 8003dd0:	6922      	ldr	r2, [r4, #16]
 8003dd2:	bf0c      	ite	eq
 8003dd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003dd8:	2500      	movne	r5, #0
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	bfc4      	itt	gt
 8003dde:	1a9b      	subgt	r3, r3, r2
 8003de0:	18ed      	addgt	r5, r5, r3
 8003de2:	2600      	movs	r6, #0
 8003de4:	341a      	adds	r4, #26
 8003de6:	42b5      	cmp	r5, r6
 8003de8:	d11a      	bne.n	8003e20 <_printf_common+0xc8>
 8003dea:	2000      	movs	r0, #0
 8003dec:	e008      	b.n	8003e00 <_printf_common+0xa8>
 8003dee:	2301      	movs	r3, #1
 8003df0:	4652      	mov	r2, sl
 8003df2:	4649      	mov	r1, r9
 8003df4:	4638      	mov	r0, r7
 8003df6:	47c0      	blx	r8
 8003df8:	3001      	adds	r0, #1
 8003dfa:	d103      	bne.n	8003e04 <_printf_common+0xac>
 8003dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8003e00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e04:	3501      	adds	r5, #1
 8003e06:	e7c6      	b.n	8003d96 <_printf_common+0x3e>
 8003e08:	18e1      	adds	r1, r4, r3
 8003e0a:	1c5a      	adds	r2, r3, #1
 8003e0c:	2030      	movs	r0, #48	; 0x30
 8003e0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e12:	4422      	add	r2, r4
 8003e14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e1c:	3302      	adds	r3, #2
 8003e1e:	e7c7      	b.n	8003db0 <_printf_common+0x58>
 8003e20:	2301      	movs	r3, #1
 8003e22:	4622      	mov	r2, r4
 8003e24:	4649      	mov	r1, r9
 8003e26:	4638      	mov	r0, r7
 8003e28:	47c0      	blx	r8
 8003e2a:	3001      	adds	r0, #1
 8003e2c:	d0e6      	beq.n	8003dfc <_printf_common+0xa4>
 8003e2e:	3601      	adds	r6, #1
 8003e30:	e7d9      	b.n	8003de6 <_printf_common+0x8e>
	...

08003e34 <_printf_i>:
 8003e34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e38:	7e0f      	ldrb	r7, [r1, #24]
 8003e3a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003e3c:	2f78      	cmp	r7, #120	; 0x78
 8003e3e:	4691      	mov	r9, r2
 8003e40:	4680      	mov	r8, r0
 8003e42:	460c      	mov	r4, r1
 8003e44:	469a      	mov	sl, r3
 8003e46:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003e4a:	d807      	bhi.n	8003e5c <_printf_i+0x28>
 8003e4c:	2f62      	cmp	r7, #98	; 0x62
 8003e4e:	d80a      	bhi.n	8003e66 <_printf_i+0x32>
 8003e50:	2f00      	cmp	r7, #0
 8003e52:	f000 80d8 	beq.w	8004006 <_printf_i+0x1d2>
 8003e56:	2f58      	cmp	r7, #88	; 0x58
 8003e58:	f000 80a3 	beq.w	8003fa2 <_printf_i+0x16e>
 8003e5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003e64:	e03a      	b.n	8003edc <_printf_i+0xa8>
 8003e66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003e6a:	2b15      	cmp	r3, #21
 8003e6c:	d8f6      	bhi.n	8003e5c <_printf_i+0x28>
 8003e6e:	a101      	add	r1, pc, #4	; (adr r1, 8003e74 <_printf_i+0x40>)
 8003e70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003e74:	08003ecd 	.word	0x08003ecd
 8003e78:	08003ee1 	.word	0x08003ee1
 8003e7c:	08003e5d 	.word	0x08003e5d
 8003e80:	08003e5d 	.word	0x08003e5d
 8003e84:	08003e5d 	.word	0x08003e5d
 8003e88:	08003e5d 	.word	0x08003e5d
 8003e8c:	08003ee1 	.word	0x08003ee1
 8003e90:	08003e5d 	.word	0x08003e5d
 8003e94:	08003e5d 	.word	0x08003e5d
 8003e98:	08003e5d 	.word	0x08003e5d
 8003e9c:	08003e5d 	.word	0x08003e5d
 8003ea0:	08003fed 	.word	0x08003fed
 8003ea4:	08003f11 	.word	0x08003f11
 8003ea8:	08003fcf 	.word	0x08003fcf
 8003eac:	08003e5d 	.word	0x08003e5d
 8003eb0:	08003e5d 	.word	0x08003e5d
 8003eb4:	0800400f 	.word	0x0800400f
 8003eb8:	08003e5d 	.word	0x08003e5d
 8003ebc:	08003f11 	.word	0x08003f11
 8003ec0:	08003e5d 	.word	0x08003e5d
 8003ec4:	08003e5d 	.word	0x08003e5d
 8003ec8:	08003fd7 	.word	0x08003fd7
 8003ecc:	682b      	ldr	r3, [r5, #0]
 8003ece:	1d1a      	adds	r2, r3, #4
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	602a      	str	r2, [r5, #0]
 8003ed4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ed8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003edc:	2301      	movs	r3, #1
 8003ede:	e0a3      	b.n	8004028 <_printf_i+0x1f4>
 8003ee0:	6820      	ldr	r0, [r4, #0]
 8003ee2:	6829      	ldr	r1, [r5, #0]
 8003ee4:	0606      	lsls	r6, r0, #24
 8003ee6:	f101 0304 	add.w	r3, r1, #4
 8003eea:	d50a      	bpl.n	8003f02 <_printf_i+0xce>
 8003eec:	680e      	ldr	r6, [r1, #0]
 8003eee:	602b      	str	r3, [r5, #0]
 8003ef0:	2e00      	cmp	r6, #0
 8003ef2:	da03      	bge.n	8003efc <_printf_i+0xc8>
 8003ef4:	232d      	movs	r3, #45	; 0x2d
 8003ef6:	4276      	negs	r6, r6
 8003ef8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003efc:	485e      	ldr	r0, [pc, #376]	; (8004078 <_printf_i+0x244>)
 8003efe:	230a      	movs	r3, #10
 8003f00:	e019      	b.n	8003f36 <_printf_i+0x102>
 8003f02:	680e      	ldr	r6, [r1, #0]
 8003f04:	602b      	str	r3, [r5, #0]
 8003f06:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003f0a:	bf18      	it	ne
 8003f0c:	b236      	sxthne	r6, r6
 8003f0e:	e7ef      	b.n	8003ef0 <_printf_i+0xbc>
 8003f10:	682b      	ldr	r3, [r5, #0]
 8003f12:	6820      	ldr	r0, [r4, #0]
 8003f14:	1d19      	adds	r1, r3, #4
 8003f16:	6029      	str	r1, [r5, #0]
 8003f18:	0601      	lsls	r1, r0, #24
 8003f1a:	d501      	bpl.n	8003f20 <_printf_i+0xec>
 8003f1c:	681e      	ldr	r6, [r3, #0]
 8003f1e:	e002      	b.n	8003f26 <_printf_i+0xf2>
 8003f20:	0646      	lsls	r6, r0, #25
 8003f22:	d5fb      	bpl.n	8003f1c <_printf_i+0xe8>
 8003f24:	881e      	ldrh	r6, [r3, #0]
 8003f26:	4854      	ldr	r0, [pc, #336]	; (8004078 <_printf_i+0x244>)
 8003f28:	2f6f      	cmp	r7, #111	; 0x6f
 8003f2a:	bf0c      	ite	eq
 8003f2c:	2308      	moveq	r3, #8
 8003f2e:	230a      	movne	r3, #10
 8003f30:	2100      	movs	r1, #0
 8003f32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f36:	6865      	ldr	r5, [r4, #4]
 8003f38:	60a5      	str	r5, [r4, #8]
 8003f3a:	2d00      	cmp	r5, #0
 8003f3c:	bfa2      	ittt	ge
 8003f3e:	6821      	ldrge	r1, [r4, #0]
 8003f40:	f021 0104 	bicge.w	r1, r1, #4
 8003f44:	6021      	strge	r1, [r4, #0]
 8003f46:	b90e      	cbnz	r6, 8003f4c <_printf_i+0x118>
 8003f48:	2d00      	cmp	r5, #0
 8003f4a:	d04d      	beq.n	8003fe8 <_printf_i+0x1b4>
 8003f4c:	4615      	mov	r5, r2
 8003f4e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003f52:	fb03 6711 	mls	r7, r3, r1, r6
 8003f56:	5dc7      	ldrb	r7, [r0, r7]
 8003f58:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003f5c:	4637      	mov	r7, r6
 8003f5e:	42bb      	cmp	r3, r7
 8003f60:	460e      	mov	r6, r1
 8003f62:	d9f4      	bls.n	8003f4e <_printf_i+0x11a>
 8003f64:	2b08      	cmp	r3, #8
 8003f66:	d10b      	bne.n	8003f80 <_printf_i+0x14c>
 8003f68:	6823      	ldr	r3, [r4, #0]
 8003f6a:	07de      	lsls	r6, r3, #31
 8003f6c:	d508      	bpl.n	8003f80 <_printf_i+0x14c>
 8003f6e:	6923      	ldr	r3, [r4, #16]
 8003f70:	6861      	ldr	r1, [r4, #4]
 8003f72:	4299      	cmp	r1, r3
 8003f74:	bfde      	ittt	le
 8003f76:	2330      	movle	r3, #48	; 0x30
 8003f78:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003f7c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003f80:	1b52      	subs	r2, r2, r5
 8003f82:	6122      	str	r2, [r4, #16]
 8003f84:	f8cd a000 	str.w	sl, [sp]
 8003f88:	464b      	mov	r3, r9
 8003f8a:	aa03      	add	r2, sp, #12
 8003f8c:	4621      	mov	r1, r4
 8003f8e:	4640      	mov	r0, r8
 8003f90:	f7ff fee2 	bl	8003d58 <_printf_common>
 8003f94:	3001      	adds	r0, #1
 8003f96:	d14c      	bne.n	8004032 <_printf_i+0x1fe>
 8003f98:	f04f 30ff 	mov.w	r0, #4294967295
 8003f9c:	b004      	add	sp, #16
 8003f9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fa2:	4835      	ldr	r0, [pc, #212]	; (8004078 <_printf_i+0x244>)
 8003fa4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003fa8:	6829      	ldr	r1, [r5, #0]
 8003faa:	6823      	ldr	r3, [r4, #0]
 8003fac:	f851 6b04 	ldr.w	r6, [r1], #4
 8003fb0:	6029      	str	r1, [r5, #0]
 8003fb2:	061d      	lsls	r5, r3, #24
 8003fb4:	d514      	bpl.n	8003fe0 <_printf_i+0x1ac>
 8003fb6:	07df      	lsls	r7, r3, #31
 8003fb8:	bf44      	itt	mi
 8003fba:	f043 0320 	orrmi.w	r3, r3, #32
 8003fbe:	6023      	strmi	r3, [r4, #0]
 8003fc0:	b91e      	cbnz	r6, 8003fca <_printf_i+0x196>
 8003fc2:	6823      	ldr	r3, [r4, #0]
 8003fc4:	f023 0320 	bic.w	r3, r3, #32
 8003fc8:	6023      	str	r3, [r4, #0]
 8003fca:	2310      	movs	r3, #16
 8003fcc:	e7b0      	b.n	8003f30 <_printf_i+0xfc>
 8003fce:	6823      	ldr	r3, [r4, #0]
 8003fd0:	f043 0320 	orr.w	r3, r3, #32
 8003fd4:	6023      	str	r3, [r4, #0]
 8003fd6:	2378      	movs	r3, #120	; 0x78
 8003fd8:	4828      	ldr	r0, [pc, #160]	; (800407c <_printf_i+0x248>)
 8003fda:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003fde:	e7e3      	b.n	8003fa8 <_printf_i+0x174>
 8003fe0:	0659      	lsls	r1, r3, #25
 8003fe2:	bf48      	it	mi
 8003fe4:	b2b6      	uxthmi	r6, r6
 8003fe6:	e7e6      	b.n	8003fb6 <_printf_i+0x182>
 8003fe8:	4615      	mov	r5, r2
 8003fea:	e7bb      	b.n	8003f64 <_printf_i+0x130>
 8003fec:	682b      	ldr	r3, [r5, #0]
 8003fee:	6826      	ldr	r6, [r4, #0]
 8003ff0:	6961      	ldr	r1, [r4, #20]
 8003ff2:	1d18      	adds	r0, r3, #4
 8003ff4:	6028      	str	r0, [r5, #0]
 8003ff6:	0635      	lsls	r5, r6, #24
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	d501      	bpl.n	8004000 <_printf_i+0x1cc>
 8003ffc:	6019      	str	r1, [r3, #0]
 8003ffe:	e002      	b.n	8004006 <_printf_i+0x1d2>
 8004000:	0670      	lsls	r0, r6, #25
 8004002:	d5fb      	bpl.n	8003ffc <_printf_i+0x1c8>
 8004004:	8019      	strh	r1, [r3, #0]
 8004006:	2300      	movs	r3, #0
 8004008:	6123      	str	r3, [r4, #16]
 800400a:	4615      	mov	r5, r2
 800400c:	e7ba      	b.n	8003f84 <_printf_i+0x150>
 800400e:	682b      	ldr	r3, [r5, #0]
 8004010:	1d1a      	adds	r2, r3, #4
 8004012:	602a      	str	r2, [r5, #0]
 8004014:	681d      	ldr	r5, [r3, #0]
 8004016:	6862      	ldr	r2, [r4, #4]
 8004018:	2100      	movs	r1, #0
 800401a:	4628      	mov	r0, r5
 800401c:	f7fc f8e8 	bl	80001f0 <memchr>
 8004020:	b108      	cbz	r0, 8004026 <_printf_i+0x1f2>
 8004022:	1b40      	subs	r0, r0, r5
 8004024:	6060      	str	r0, [r4, #4]
 8004026:	6863      	ldr	r3, [r4, #4]
 8004028:	6123      	str	r3, [r4, #16]
 800402a:	2300      	movs	r3, #0
 800402c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004030:	e7a8      	b.n	8003f84 <_printf_i+0x150>
 8004032:	6923      	ldr	r3, [r4, #16]
 8004034:	462a      	mov	r2, r5
 8004036:	4649      	mov	r1, r9
 8004038:	4640      	mov	r0, r8
 800403a:	47d0      	blx	sl
 800403c:	3001      	adds	r0, #1
 800403e:	d0ab      	beq.n	8003f98 <_printf_i+0x164>
 8004040:	6823      	ldr	r3, [r4, #0]
 8004042:	079b      	lsls	r3, r3, #30
 8004044:	d413      	bmi.n	800406e <_printf_i+0x23a>
 8004046:	68e0      	ldr	r0, [r4, #12]
 8004048:	9b03      	ldr	r3, [sp, #12]
 800404a:	4298      	cmp	r0, r3
 800404c:	bfb8      	it	lt
 800404e:	4618      	movlt	r0, r3
 8004050:	e7a4      	b.n	8003f9c <_printf_i+0x168>
 8004052:	2301      	movs	r3, #1
 8004054:	4632      	mov	r2, r6
 8004056:	4649      	mov	r1, r9
 8004058:	4640      	mov	r0, r8
 800405a:	47d0      	blx	sl
 800405c:	3001      	adds	r0, #1
 800405e:	d09b      	beq.n	8003f98 <_printf_i+0x164>
 8004060:	3501      	adds	r5, #1
 8004062:	68e3      	ldr	r3, [r4, #12]
 8004064:	9903      	ldr	r1, [sp, #12]
 8004066:	1a5b      	subs	r3, r3, r1
 8004068:	42ab      	cmp	r3, r5
 800406a:	dcf2      	bgt.n	8004052 <_printf_i+0x21e>
 800406c:	e7eb      	b.n	8004046 <_printf_i+0x212>
 800406e:	2500      	movs	r5, #0
 8004070:	f104 0619 	add.w	r6, r4, #25
 8004074:	e7f5      	b.n	8004062 <_printf_i+0x22e>
 8004076:	bf00      	nop
 8004078:	080048bd 	.word	0x080048bd
 800407c:	080048ce 	.word	0x080048ce

08004080 <memcpy>:
 8004080:	440a      	add	r2, r1
 8004082:	4291      	cmp	r1, r2
 8004084:	f100 33ff 	add.w	r3, r0, #4294967295
 8004088:	d100      	bne.n	800408c <memcpy+0xc>
 800408a:	4770      	bx	lr
 800408c:	b510      	push	{r4, lr}
 800408e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004092:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004096:	4291      	cmp	r1, r2
 8004098:	d1f9      	bne.n	800408e <memcpy+0xe>
 800409a:	bd10      	pop	{r4, pc}

0800409c <memmove>:
 800409c:	4288      	cmp	r0, r1
 800409e:	b510      	push	{r4, lr}
 80040a0:	eb01 0402 	add.w	r4, r1, r2
 80040a4:	d902      	bls.n	80040ac <memmove+0x10>
 80040a6:	4284      	cmp	r4, r0
 80040a8:	4623      	mov	r3, r4
 80040aa:	d807      	bhi.n	80040bc <memmove+0x20>
 80040ac:	1e43      	subs	r3, r0, #1
 80040ae:	42a1      	cmp	r1, r4
 80040b0:	d008      	beq.n	80040c4 <memmove+0x28>
 80040b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80040b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80040ba:	e7f8      	b.n	80040ae <memmove+0x12>
 80040bc:	4402      	add	r2, r0
 80040be:	4601      	mov	r1, r0
 80040c0:	428a      	cmp	r2, r1
 80040c2:	d100      	bne.n	80040c6 <memmove+0x2a>
 80040c4:	bd10      	pop	{r4, pc}
 80040c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80040ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80040ce:	e7f7      	b.n	80040c0 <memmove+0x24>

080040d0 <_free_r>:
 80040d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80040d2:	2900      	cmp	r1, #0
 80040d4:	d044      	beq.n	8004160 <_free_r+0x90>
 80040d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040da:	9001      	str	r0, [sp, #4]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	f1a1 0404 	sub.w	r4, r1, #4
 80040e2:	bfb8      	it	lt
 80040e4:	18e4      	addlt	r4, r4, r3
 80040e6:	f000 f913 	bl	8004310 <__malloc_lock>
 80040ea:	4a1e      	ldr	r2, [pc, #120]	; (8004164 <_free_r+0x94>)
 80040ec:	9801      	ldr	r0, [sp, #4]
 80040ee:	6813      	ldr	r3, [r2, #0]
 80040f0:	b933      	cbnz	r3, 8004100 <_free_r+0x30>
 80040f2:	6063      	str	r3, [r4, #4]
 80040f4:	6014      	str	r4, [r2, #0]
 80040f6:	b003      	add	sp, #12
 80040f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80040fc:	f000 b90e 	b.w	800431c <__malloc_unlock>
 8004100:	42a3      	cmp	r3, r4
 8004102:	d908      	bls.n	8004116 <_free_r+0x46>
 8004104:	6825      	ldr	r5, [r4, #0]
 8004106:	1961      	adds	r1, r4, r5
 8004108:	428b      	cmp	r3, r1
 800410a:	bf01      	itttt	eq
 800410c:	6819      	ldreq	r1, [r3, #0]
 800410e:	685b      	ldreq	r3, [r3, #4]
 8004110:	1949      	addeq	r1, r1, r5
 8004112:	6021      	streq	r1, [r4, #0]
 8004114:	e7ed      	b.n	80040f2 <_free_r+0x22>
 8004116:	461a      	mov	r2, r3
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	b10b      	cbz	r3, 8004120 <_free_r+0x50>
 800411c:	42a3      	cmp	r3, r4
 800411e:	d9fa      	bls.n	8004116 <_free_r+0x46>
 8004120:	6811      	ldr	r1, [r2, #0]
 8004122:	1855      	adds	r5, r2, r1
 8004124:	42a5      	cmp	r5, r4
 8004126:	d10b      	bne.n	8004140 <_free_r+0x70>
 8004128:	6824      	ldr	r4, [r4, #0]
 800412a:	4421      	add	r1, r4
 800412c:	1854      	adds	r4, r2, r1
 800412e:	42a3      	cmp	r3, r4
 8004130:	6011      	str	r1, [r2, #0]
 8004132:	d1e0      	bne.n	80040f6 <_free_r+0x26>
 8004134:	681c      	ldr	r4, [r3, #0]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	6053      	str	r3, [r2, #4]
 800413a:	4421      	add	r1, r4
 800413c:	6011      	str	r1, [r2, #0]
 800413e:	e7da      	b.n	80040f6 <_free_r+0x26>
 8004140:	d902      	bls.n	8004148 <_free_r+0x78>
 8004142:	230c      	movs	r3, #12
 8004144:	6003      	str	r3, [r0, #0]
 8004146:	e7d6      	b.n	80040f6 <_free_r+0x26>
 8004148:	6825      	ldr	r5, [r4, #0]
 800414a:	1961      	adds	r1, r4, r5
 800414c:	428b      	cmp	r3, r1
 800414e:	bf04      	itt	eq
 8004150:	6819      	ldreq	r1, [r3, #0]
 8004152:	685b      	ldreq	r3, [r3, #4]
 8004154:	6063      	str	r3, [r4, #4]
 8004156:	bf04      	itt	eq
 8004158:	1949      	addeq	r1, r1, r5
 800415a:	6021      	streq	r1, [r4, #0]
 800415c:	6054      	str	r4, [r2, #4]
 800415e:	e7ca      	b.n	80040f6 <_free_r+0x26>
 8004160:	b003      	add	sp, #12
 8004162:	bd30      	pop	{r4, r5, pc}
 8004164:	20000278 	.word	0x20000278

08004168 <sbrk_aligned>:
 8004168:	b570      	push	{r4, r5, r6, lr}
 800416a:	4e0e      	ldr	r6, [pc, #56]	; (80041a4 <sbrk_aligned+0x3c>)
 800416c:	460c      	mov	r4, r1
 800416e:	6831      	ldr	r1, [r6, #0]
 8004170:	4605      	mov	r5, r0
 8004172:	b911      	cbnz	r1, 800417a <sbrk_aligned+0x12>
 8004174:	f000 f8bc 	bl	80042f0 <_sbrk_r>
 8004178:	6030      	str	r0, [r6, #0]
 800417a:	4621      	mov	r1, r4
 800417c:	4628      	mov	r0, r5
 800417e:	f000 f8b7 	bl	80042f0 <_sbrk_r>
 8004182:	1c43      	adds	r3, r0, #1
 8004184:	d00a      	beq.n	800419c <sbrk_aligned+0x34>
 8004186:	1cc4      	adds	r4, r0, #3
 8004188:	f024 0403 	bic.w	r4, r4, #3
 800418c:	42a0      	cmp	r0, r4
 800418e:	d007      	beq.n	80041a0 <sbrk_aligned+0x38>
 8004190:	1a21      	subs	r1, r4, r0
 8004192:	4628      	mov	r0, r5
 8004194:	f000 f8ac 	bl	80042f0 <_sbrk_r>
 8004198:	3001      	adds	r0, #1
 800419a:	d101      	bne.n	80041a0 <sbrk_aligned+0x38>
 800419c:	f04f 34ff 	mov.w	r4, #4294967295
 80041a0:	4620      	mov	r0, r4
 80041a2:	bd70      	pop	{r4, r5, r6, pc}
 80041a4:	2000027c 	.word	0x2000027c

080041a8 <_malloc_r>:
 80041a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041ac:	1ccd      	adds	r5, r1, #3
 80041ae:	f025 0503 	bic.w	r5, r5, #3
 80041b2:	3508      	adds	r5, #8
 80041b4:	2d0c      	cmp	r5, #12
 80041b6:	bf38      	it	cc
 80041b8:	250c      	movcc	r5, #12
 80041ba:	2d00      	cmp	r5, #0
 80041bc:	4607      	mov	r7, r0
 80041be:	db01      	blt.n	80041c4 <_malloc_r+0x1c>
 80041c0:	42a9      	cmp	r1, r5
 80041c2:	d905      	bls.n	80041d0 <_malloc_r+0x28>
 80041c4:	230c      	movs	r3, #12
 80041c6:	603b      	str	r3, [r7, #0]
 80041c8:	2600      	movs	r6, #0
 80041ca:	4630      	mov	r0, r6
 80041cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041d0:	4e2e      	ldr	r6, [pc, #184]	; (800428c <_malloc_r+0xe4>)
 80041d2:	f000 f89d 	bl	8004310 <__malloc_lock>
 80041d6:	6833      	ldr	r3, [r6, #0]
 80041d8:	461c      	mov	r4, r3
 80041da:	bb34      	cbnz	r4, 800422a <_malloc_r+0x82>
 80041dc:	4629      	mov	r1, r5
 80041de:	4638      	mov	r0, r7
 80041e0:	f7ff ffc2 	bl	8004168 <sbrk_aligned>
 80041e4:	1c43      	adds	r3, r0, #1
 80041e6:	4604      	mov	r4, r0
 80041e8:	d14d      	bne.n	8004286 <_malloc_r+0xde>
 80041ea:	6834      	ldr	r4, [r6, #0]
 80041ec:	4626      	mov	r6, r4
 80041ee:	2e00      	cmp	r6, #0
 80041f0:	d140      	bne.n	8004274 <_malloc_r+0xcc>
 80041f2:	6823      	ldr	r3, [r4, #0]
 80041f4:	4631      	mov	r1, r6
 80041f6:	4638      	mov	r0, r7
 80041f8:	eb04 0803 	add.w	r8, r4, r3
 80041fc:	f000 f878 	bl	80042f0 <_sbrk_r>
 8004200:	4580      	cmp	r8, r0
 8004202:	d13a      	bne.n	800427a <_malloc_r+0xd2>
 8004204:	6821      	ldr	r1, [r4, #0]
 8004206:	3503      	adds	r5, #3
 8004208:	1a6d      	subs	r5, r5, r1
 800420a:	f025 0503 	bic.w	r5, r5, #3
 800420e:	3508      	adds	r5, #8
 8004210:	2d0c      	cmp	r5, #12
 8004212:	bf38      	it	cc
 8004214:	250c      	movcc	r5, #12
 8004216:	4629      	mov	r1, r5
 8004218:	4638      	mov	r0, r7
 800421a:	f7ff ffa5 	bl	8004168 <sbrk_aligned>
 800421e:	3001      	adds	r0, #1
 8004220:	d02b      	beq.n	800427a <_malloc_r+0xd2>
 8004222:	6823      	ldr	r3, [r4, #0]
 8004224:	442b      	add	r3, r5
 8004226:	6023      	str	r3, [r4, #0]
 8004228:	e00e      	b.n	8004248 <_malloc_r+0xa0>
 800422a:	6822      	ldr	r2, [r4, #0]
 800422c:	1b52      	subs	r2, r2, r5
 800422e:	d41e      	bmi.n	800426e <_malloc_r+0xc6>
 8004230:	2a0b      	cmp	r2, #11
 8004232:	d916      	bls.n	8004262 <_malloc_r+0xba>
 8004234:	1961      	adds	r1, r4, r5
 8004236:	42a3      	cmp	r3, r4
 8004238:	6025      	str	r5, [r4, #0]
 800423a:	bf18      	it	ne
 800423c:	6059      	strne	r1, [r3, #4]
 800423e:	6863      	ldr	r3, [r4, #4]
 8004240:	bf08      	it	eq
 8004242:	6031      	streq	r1, [r6, #0]
 8004244:	5162      	str	r2, [r4, r5]
 8004246:	604b      	str	r3, [r1, #4]
 8004248:	4638      	mov	r0, r7
 800424a:	f104 060b 	add.w	r6, r4, #11
 800424e:	f000 f865 	bl	800431c <__malloc_unlock>
 8004252:	f026 0607 	bic.w	r6, r6, #7
 8004256:	1d23      	adds	r3, r4, #4
 8004258:	1af2      	subs	r2, r6, r3
 800425a:	d0b6      	beq.n	80041ca <_malloc_r+0x22>
 800425c:	1b9b      	subs	r3, r3, r6
 800425e:	50a3      	str	r3, [r4, r2]
 8004260:	e7b3      	b.n	80041ca <_malloc_r+0x22>
 8004262:	6862      	ldr	r2, [r4, #4]
 8004264:	42a3      	cmp	r3, r4
 8004266:	bf0c      	ite	eq
 8004268:	6032      	streq	r2, [r6, #0]
 800426a:	605a      	strne	r2, [r3, #4]
 800426c:	e7ec      	b.n	8004248 <_malloc_r+0xa0>
 800426e:	4623      	mov	r3, r4
 8004270:	6864      	ldr	r4, [r4, #4]
 8004272:	e7b2      	b.n	80041da <_malloc_r+0x32>
 8004274:	4634      	mov	r4, r6
 8004276:	6876      	ldr	r6, [r6, #4]
 8004278:	e7b9      	b.n	80041ee <_malloc_r+0x46>
 800427a:	230c      	movs	r3, #12
 800427c:	603b      	str	r3, [r7, #0]
 800427e:	4638      	mov	r0, r7
 8004280:	f000 f84c 	bl	800431c <__malloc_unlock>
 8004284:	e7a1      	b.n	80041ca <_malloc_r+0x22>
 8004286:	6025      	str	r5, [r4, #0]
 8004288:	e7de      	b.n	8004248 <_malloc_r+0xa0>
 800428a:	bf00      	nop
 800428c:	20000278 	.word	0x20000278

08004290 <_realloc_r>:
 8004290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004294:	4680      	mov	r8, r0
 8004296:	4614      	mov	r4, r2
 8004298:	460e      	mov	r6, r1
 800429a:	b921      	cbnz	r1, 80042a6 <_realloc_r+0x16>
 800429c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80042a0:	4611      	mov	r1, r2
 80042a2:	f7ff bf81 	b.w	80041a8 <_malloc_r>
 80042a6:	b92a      	cbnz	r2, 80042b4 <_realloc_r+0x24>
 80042a8:	f7ff ff12 	bl	80040d0 <_free_r>
 80042ac:	4625      	mov	r5, r4
 80042ae:	4628      	mov	r0, r5
 80042b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042b4:	f000 f838 	bl	8004328 <_malloc_usable_size_r>
 80042b8:	4284      	cmp	r4, r0
 80042ba:	4607      	mov	r7, r0
 80042bc:	d802      	bhi.n	80042c4 <_realloc_r+0x34>
 80042be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80042c2:	d812      	bhi.n	80042ea <_realloc_r+0x5a>
 80042c4:	4621      	mov	r1, r4
 80042c6:	4640      	mov	r0, r8
 80042c8:	f7ff ff6e 	bl	80041a8 <_malloc_r>
 80042cc:	4605      	mov	r5, r0
 80042ce:	2800      	cmp	r0, #0
 80042d0:	d0ed      	beq.n	80042ae <_realloc_r+0x1e>
 80042d2:	42bc      	cmp	r4, r7
 80042d4:	4622      	mov	r2, r4
 80042d6:	4631      	mov	r1, r6
 80042d8:	bf28      	it	cs
 80042da:	463a      	movcs	r2, r7
 80042dc:	f7ff fed0 	bl	8004080 <memcpy>
 80042e0:	4631      	mov	r1, r6
 80042e2:	4640      	mov	r0, r8
 80042e4:	f7ff fef4 	bl	80040d0 <_free_r>
 80042e8:	e7e1      	b.n	80042ae <_realloc_r+0x1e>
 80042ea:	4635      	mov	r5, r6
 80042ec:	e7df      	b.n	80042ae <_realloc_r+0x1e>
	...

080042f0 <_sbrk_r>:
 80042f0:	b538      	push	{r3, r4, r5, lr}
 80042f2:	4d06      	ldr	r5, [pc, #24]	; (800430c <_sbrk_r+0x1c>)
 80042f4:	2300      	movs	r3, #0
 80042f6:	4604      	mov	r4, r0
 80042f8:	4608      	mov	r0, r1
 80042fa:	602b      	str	r3, [r5, #0]
 80042fc:	f7fc fd50 	bl	8000da0 <_sbrk>
 8004300:	1c43      	adds	r3, r0, #1
 8004302:	d102      	bne.n	800430a <_sbrk_r+0x1a>
 8004304:	682b      	ldr	r3, [r5, #0]
 8004306:	b103      	cbz	r3, 800430a <_sbrk_r+0x1a>
 8004308:	6023      	str	r3, [r4, #0]
 800430a:	bd38      	pop	{r3, r4, r5, pc}
 800430c:	20000280 	.word	0x20000280

08004310 <__malloc_lock>:
 8004310:	4801      	ldr	r0, [pc, #4]	; (8004318 <__malloc_lock+0x8>)
 8004312:	f000 b811 	b.w	8004338 <__retarget_lock_acquire_recursive>
 8004316:	bf00      	nop
 8004318:	20000284 	.word	0x20000284

0800431c <__malloc_unlock>:
 800431c:	4801      	ldr	r0, [pc, #4]	; (8004324 <__malloc_unlock+0x8>)
 800431e:	f000 b80c 	b.w	800433a <__retarget_lock_release_recursive>
 8004322:	bf00      	nop
 8004324:	20000284 	.word	0x20000284

08004328 <_malloc_usable_size_r>:
 8004328:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800432c:	1f18      	subs	r0, r3, #4
 800432e:	2b00      	cmp	r3, #0
 8004330:	bfbc      	itt	lt
 8004332:	580b      	ldrlt	r3, [r1, r0]
 8004334:	18c0      	addlt	r0, r0, r3
 8004336:	4770      	bx	lr

08004338 <__retarget_lock_acquire_recursive>:
 8004338:	4770      	bx	lr

0800433a <__retarget_lock_release_recursive>:
 800433a:	4770      	bx	lr

0800433c <_init>:
 800433c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800433e:	bf00      	nop
 8004340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004342:	bc08      	pop	{r3}
 8004344:	469e      	mov	lr, r3
 8004346:	4770      	bx	lr

08004348 <_fini>:
 8004348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800434a:	bf00      	nop
 800434c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800434e:	bc08      	pop	{r3}
 8004350:	469e      	mov	lr, r3
 8004352:	4770      	bx	lr
